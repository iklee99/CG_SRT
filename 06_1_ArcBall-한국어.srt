1
00:00:00,000 --> 00:00:03,810
ArcBall 강의 시작하겠습니다.

2
00:00:03,810 --> 00:00:06,980
이것은 ArcBall을 소개하는 프로그램 입니다.

3
00:00:06,980 --> 00:00:11,000
Mouse의 왼쪽 버튼을 누른 채로 드래깅하여

4
00:00:11,000 --> 00:00:14,010
물체들을 회전시킬 수 있습니다.

5
00:00:14,010 --> 00:00:17,380
a' key를 누르면 camera를 회전하는 것과

6
00:00:17,380 --> 00:00:22,530
object를 회전하는 mode들을 toggle할 수 있습니다.

7
00:00:22,530 --> 00:00:26,900
r' key는 arcball interface를 초기화하여

8
00:00:26,900 --> 00:00:28,990
초기상태로 돌아가게 합니다.

9
00:00:28,990 --> 00:00:32,430
Arcball 은 software로 구현되어

10
00:00:32,430 --> 00:00:37,610
mouse 만으로 rotation을 control할 수 있는 interface 입니다.

11
00:00:37,610 --> 00:00:43,300
이 것은 실제 존재하는 trackball 장치를 시뮬레이션한 것입니다.

12
00:00:43,300 --> 00:00:46,890
Trackball 장치는 그림과 같이 생겼는데

13
00:00:46,890 --> 00:00:53,660
튀어나온 공을 손으로 굴려 회전 데이터를 입력할 수 있게 합니다.

14
00:00:53,660 --> 00:00:59,330
이제 가상의 반구를 컴퓨터 스크린 위에 놓아 봅시다.

15
00:00:59,330 --> 00:01:04,850
반구위의 한 점 (x,y,z)는 screen 위의 점 (x,y,0)로

16
00:01:04,850 --> 00:01:07,870
mapping 할 수 있습니다.

17
00:01:07,870 --> 00:01:11,610
반대로 screen 위의 한 점 (x,y,0)를

18
00:01:11,610 --> 00:01:15,290
마우스로 지정했다고 가정해 봅니다.

19
00:01:15,290 --> 00:01:19,960
이 점으로 부터 반대로 반구위에 있는 점 (x,y,z)를

20
00:01:19,960 --> 00:01:23,380
mapping 시킬 수 있습니다.

21
00:01:23,380 --> 00:01:28,360
x,y 값은 screen 상의 좌표와 같습니다.

22
00:01:28,360 --> 00:01:33,850
구의 방정식이 x^2 + y^2 + z^2  = 1 이니까

23
00:01:33,850 --> 00:01:43,040
z 값은  sqrt(1 - x^2 - y^2) 으로 구할 수 있습니다.

24
00:01:43,040 --> 00:01:47,390
즉, mouse로 screen위에 지정하는 어떤 위치를

25
00:01:47,390 --> 00:01:53,530
arcball 상의 3D 포인트 좌표로 mapping 할 수 있는 것입니다.

26
00:01:53,530 --> 00:01:57,970
그렇다면 screen 위에 projection 되는 부분 이외의

27
00:01:57,970 --> 00:01:59,690
screen의 구석 부분,

28
00:01:59,690 --> 00:02:04,380
즉, 그림에서 빨간색으로 표시되는 부분의 좌표들은

29
00:02:04,380 --> 00:02:09,390
어떻게 반구로 매핑할 수 있을까요?

30
00:02:09,390 --> 00:02:11,640
이 부분의 mouse 좌표는

31
00:02:11,640 --> 00:02:15,040
반구 위에서 가장 가까운 point로 바꾸어

32
00:02:15,040 --> 00:02:18,300
mapping을 하게 됩니다.

33
00:02:18,300 --> 00:02:21,540
이제 screen의 mouse 좌표 두 곳으로 부터 mapping된

34
00:02:21,540 --> 00:02:26,940
반구 상의 두 점 p1,p2를 고려해 봅시다.

35
00:02:26,940 --> 00:02:32,800
우리의 목표는 마우스가 p1으로 부터 p2로 드래깅 되었을 때,

36
00:02:32,800 --> 00:02:34,950
그 입력 행위가 나타내는

37
00:02:34,950 --> 00:02:39,840
rotation transformation matrix를 구해내는 것입니다.

38
00:02:39,840 --> 00:02:42,360
그러한 transformation을 구하기 위해

39
00:02:42,360 --> 00:02:48,250
rotation axis와 rotation angle을 구해야 합니다.

40
00:02:48,250 --> 00:02:50,460
rotation axis는 원점으로부터

41
00:02:50,460 --> 00:02:54,560
반구 상의 p1과 p2 점으로 향하는 두 벡터를

42
00:02:54,560 --> 00:02:58,880
cross product하면 쉽게 구할 수 있습니다.

43
00:02:58,880 --> 00:03:03,020
rotation angle은 p1과 p2 벡터의

44
00:03:03,020 --> 00:03:06,970
dot product로 부터 구할 수 있습니다.

45
00:03:06,970 --> 00:03:10,720
p1과 p2의 dot product는 그 정의에 의해

46
00:03:10,720 --> 00:03:16,670
p1의 크기와 p2의 크기의 곱에 cos(theta)를 곱한 것인데,

47
00:03:16,670 --> 00:03:22,280
여기서 theta가 p1, p2 두 vector 사이의 각입니다.

48
00:03:22,280 --> 00:03:28,110
p1과 p2 두 벡터는 반지름이 1인 unit sphere 위에 있으며,

49
00:03:28,110 --> 00:03:30,880
두 vector의 크기는 모두 1 입니다.

50
00:03:30,880 --> 00:03:34,970
따라서, theta는 p1과 p2의 dot product의

51
00:03:34,970 --> 00:03:37,370
arccosine과 같습니다.

52
00:03:37,370 --> 00:03:40,670
이제 rotation axis와 angle을 이용하여,

53
00:03:40,670 --> 00:03:44,640
이전에 배웠던 “임의의 axis에 관한 rotation"이나

54
00:03:44,640 --> 00:03:46,940
"quaternion" 공식들을 사용하여

55
00:03:46,940 --> 00:03:51,940
rotation transformation matrix를 구하면 됩니다.

56
00:03:51,940 --> 00:03:56,760
Arcball은 우리의 코드에 Arcball class로 구현되어 있으며,

57
00:03:56,760 --> 00:04:01,050
utils 폴더 안의 arcball.h 에 있습니다.

58
00:04:01,050 --> 00:04:03,930
먼저 member variable들을 살펴보면,

59
00:04:03,930 --> 00:04:08,110
window의 width와 height를 가지고 있습니다.

60
00:04:08,110 --> 00:04:11,370
mouseEvent 변수는 mouse의 left button이

61
00:04:11,370 --> 00:04:15,800
눌려져 있는 상태를 나타내고 있습니다.

62
00:04:15,800 --> 00:04:20,740
rollSpeed는 arcball이 만들어내는 회전의 양에 곱해져서

63
00:04:20,740 --> 00:04:23,470
mouse 움직임에 따라 회전이 너무 많거나

64
00:04:23,470 --> 00:04:28,510
너무 적게 만들어지지 않도록 조절하는 역할을 합니다.

65
00:04:28,510 --> 00:04:34,900
angle 변수는 dot product를 통해 계산되는 회전 각도를 저장합니다.

66
00:04:34,900 --> 00:04:39,780
prevPos와 currPos는 mouse가 드래깅될 때

67
00:04:39,780 --> 00:04:43,320
mouse의 이전 좌표와 현재 좌표를 저장하여

68
00:04:43,320 --> 00:04:48,120
arcball 반구 위의 두 점을 나타내게 됩니다.

69
00:04:48,120 --> 00:04:51,760
camAxis는 cross product로 계산되는

70
00:04:51,760 --> 00:04:55,070
회전축을 저장하게 됩니다.

71
00:04:55,070 --> 00:05:01,200
마지막으로 xAxis와 yAxis는 두 개의 boolean 변수인데

72
00:05:01,200 --> 00:05:05,280
x방향 또는 y방향의 mouse 움직임을

73
00:05:05,280 --> 00:05:09,330
회전에 적용할지 말지를 나타내고 있습니다.

74
00:05:09,330 --> 00:05:12,720
보통은 두 방향을 모두 고려하게 되므로

75
00:05:12,720 --> 00:05:16,990
둘 다 true로 하고 쓰는 경우가 많습니다.

76
00:05:16,990 --> 00:05:20,700
Arcball class의 toScreenCoord 함수는

77
00:05:20,700 --> 00:05:26,380
(0,0) 에서 (windowWidth, windowHeight) 사이에서 주어진

78
00:05:26,380 --> 00:05:31,100
mouse positon (x,y)를 반구상의 normalized coordinates인

79
00:05:31,100 --> 00:05:34,980
"glm::vec3 coord" 로 바꾸어 줍니다.

80
00:05:34,980 --> 00:05:41,580
coord의 x, y, z 들은 모두 [-1, 1] 사이의 값을 가집니다.

81
00:05:41,580 --> 00:05:45,280
Mouse position coordinates의 (x, y)를

82
00:05:45,280 --> 00:05:48,380
[-1, 1] 사이로 바꾸어 주는 부분에서

83
00:05:48,380 --> 00:05:51,480
glm::clamp 함수를 이용하여

84
00:05:51,480 --> 00:05:55,480
mouse position을 윈도우 안으로만 한정하는 역할을 합니다.

85
00:05:55,480 --> 00:06:01,380
coord의 z 좌표는 sphere equation을 이용해 계산합니다.

86
00:06:01,380 --> 00:06:06,750
만일 x^2 + y^2 > 1 인 경우라면,

87
00:06:06,750 --> 00:06:11,110
즉, mouse가 window의 구석쪽에 있었다면,

88
00:06:11,110 --> 00:06:15,000
coord.z 는 그냥 0으로 놓아두고,

89
00:06:15,000 --> 00:06:19,630
coord.x와 coord.y가 unit sphere상에 오도록

90
00:06:19,630 --> 00:06:22,220
normalize 하면 됩니다.

91
00:06:22,220 --> 00:06:26,110
cursorCallback 함수는 mouse가 dragging하면서

92
00:06:26,110 --> 00:06:28,730
새로운 좌표 (x, y)가 들어올 때

93
00:06:28,730 --> 00:06:32,150
rotation transformation을 계속 계산합니다.

94
00:06:32,150 --> 00:06:34,390
Mouse 입력으로 부터 구해진

95
00:06:34,390 --> 00:06:39,140
반구상의 이전 position이 prevPos에 저장되어 있고,

96
00:06:39,140 --> 00:06:42,420
새 mouse position (x, y)로 부터 만들어진

97
00:06:42,420 --> 00:06:46,230
반구상의 position이 curPos일 때

98
00:06:46,230 --> 00:06:50,450
angle의 계산은 앞에서 말했듯이 dot product를 이용합니다.

99
00:06:50,450 --> 00:06:55,420
그리고 회전축은 cross product를 이용하여 구합니다.

100
00:06:55,420 --> 00:06:58,710
createRotationMatrix 함수는

101
00:06:58,710 --> 00:07:02,380
마우스의 움직임으로 구한 axis와 angle로

102
00:07:02,380 --> 00:07:05,440
rotation matrix를 만들어 return합니다.

103
00:07:05,440 --> 00:07:08,900
이제 main.cpp를 보도록 합니다.

104
00:07:08,900 --> 00:07:11,030
먼저 arcball class가 들어있는

105
00:07:11,030 --> 00:07:14,700
arcball.h를 include해야 합니다.

106
00:07:14,700 --> 00:07:18,070
그리고 arcball의 회전 속도를 조절할 수 있는

107
00:07:18,070 --> 00:07:21,530
arcballSpeed를 정의합니다.

108
00:07:21,530 --> 00:07:24,600
Arcball 회전량이 매우 빠르기 때문에

109
00:07:24,600 --> 00:07:29,400
보통 arcballSpeed는 1보다 작은 값으로 정의합니다.

110
00:07:29,400 --> 00:07:34,750
이제 사용할 arcball들을 constructor를 사용하여 생성합니다.

111
00:07:34,750 --> 00:07:37,760
우리는 camera view의 rotation과

112
00:07:37,760 --> 00:07:40,110
가운데 cube의 rotation을 위해

113
00:07:40,110 --> 00:07:43,650
각각 하나씩의 다른 arcball을 정의하였습니다.

114
00:07:43,650 --> 00:07:46,330
bool 타입 변수인 arcballCamRot 은

115
00:07:46,330 --> 00:07:50,650
현재 회전 모드가 camera rotation mode인지 (true),

116
00:07:50,650 --> 00:07:56,800
아니면 object rotation mode (false) 인지를 구분합니다.

117
00:07:56,800 --> 00:08:01,190
camera rotation mode일 때는 camera의 view가 회전하고,

118
00:08:01,190 --> 00:08:06,350
object rotation mode일 때는 가운데 cube가 회전합니다.

119
00:08:06,350 --> 00:08:10,520
render() 함수에서 먼저 camera rotation mode라면

120
00:08:10,520 --> 00:08:14,100
glm::lookAt으로 구한 view matrix에

121
00:08:14,100 --> 00:08:21,130
camArcBall.createViewRotationMatrix()로 구한 rotation을 더 곱합니다.

122
00:08:21,130 --> 00:08:22,670
그리고 center cube에는

123
00:08:22,670 --> 00:08:30,100
modelArcBall.createRotationMatrix()로 구한 rotation matrix를

124
00:08:30,100 --> 00:08:35,080
현재의 model transformation matrix에 더 곱해주어야 합니다.

125
00:08:35,080 --> 00:08:38,750
가운데 cube를 제외한 양쪽의 cube들은

126
00:08:38,750 --> 00:08:41,860
arcball interface를 사용하지 않습니다.

127
00:08:41,860 --> 00:08:45,110
따라서 그냥 그들을 적절한 위치로 옮겨주는

128
00:08:45,110 --> 00:08:49,690
modeling transformation만 하고 그려 주면 됩니다.

129
00:08:49,690 --> 00:08:52,870
Keyboard callback에서는 'r' key가 들어왔을 때

130
00:08:52,870 --> 00:08:55,840
arcball들을 initialize해 줍니다.

131
00:08:55,840 --> 00:09:02,970
'a' key가 들어올 때 arcballCamRot를 toggle로 바꾸어 줍니다.

132
00:09:02,970 --> 00:09:06,980
Mouse button callback과 cursor position callback에서는

133
00:09:06,980 --> 00:09:11,360
적절한 arcball class의 함수들을 불러주면 됩니다.
