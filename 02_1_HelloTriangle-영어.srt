1
00:00:00,000 --> 00:00:04,540
In this notebook we're going to look at drawing a 2D Triangle.

2
00:00:04,540 --> 00:00:08,700
VBO is memory in the GPU

3
00:00:08,700 --> 00:00:11,210
where vertex data, i.e., attributes, is stored.

4
00:00:11,210 --> 00:00:13,700
Vertex attributes include

5
00:00:13,700 --> 00:00:16,770
vertex coordinates, vertex color,

6
00:00:16,770 --> 00:00:21,310
texture coordinates, and normal vector.

7
00:00:21,310 --> 00:00:27,140
We know what the vertex coordinates and color are.

8
00:00:27,140 --> 00:00:30,940
And we'll learn more about the rest as we go along.

9
00:00:30,940 --> 00:00:34,270
The vertex data inside the CPU is

10
00:00:34,270 --> 00:00:38,330
batch-transferred to VBO as a chunk,

11
00:00:38,330 --> 00:00:41,510
and that's a feature of the core profile

12
00:00:41,510 --> 00:00:44,420
distinguished from the immediate mode.

13
00:00:44,420 --> 00:00:46,940
What's interesting here is

14
00:00:46,940 --> 00:00:48,850
there's no special format

15
00:00:48,850 --> 00:00:52,700
predetermined for storing data on VBO.

16
00:00:52,700 --> 00:00:55,830
That means that the developers are free to choose

17
00:00:55,830 --> 00:00:58,980
the format that he/she want to store it in the VBO.

18
00:00:58,980 --> 00:01:05,280
Which part of the 3D space, can OpenGL draw?

19
00:01:05,280 --> 00:01:08,720
It can be drawn in the window

20
00:01:08,720 --> 00:01:12,060
if the X, Y and Z coordinates are

21
00:01:12,060 --> 00:01:14,840
all in the space between [-1, 1].

22
00:01:14,840 --> 00:01:17,280
We call these coordinate systems

23
00:01:17,280 --> 00:01:22,500
NDC or Normalized Device Coordinates.

24
00:01:22,500 --> 00:01:24,620
Later, we'll talk about camera deployments and

25
00:01:24,620 --> 00:01:28,580
various transformations,but for the time being,

26
00:01:28,580 --> 00:01:34,480
assuming that we're only going to use a default camera,

27
00:01:34,480 --> 00:01:39,370
we're only going to use vertices

28
00:01:39,370 --> 00:01:43,560
having the coordinates contained in the NDC space.

29
00:01:43,560 --> 00:01:48,030
So for the time being,

30
00:01:48,030 --> 00:01:52,030
we're only going to use the things

31
00:01:52,030 --> 00:01:56,870
between the -1 and 1, in x, y, and z coordinates.

32
00:01:56,870 --> 00:01:58,790
Homogeneous coordinates represent

33
00:01:58,790 --> 00:02:03,840
an N-dimensional position as (N+1) dimension Vector.

34
00:02:03,840 --> 00:02:08,600
So the 3D position is represented with a 4D vector.

35
00:02:08,600 --> 00:02:14,930
To convert a homogeneous 4D vector,  [x', y', z', w],

36
00:02:14,930 --> 00:02:17,450
to 3D coordinates,

37
00:02:17,450 --> 00:02:25,440
we divide the last x', y', z' by w.

38
00:02:25,440 --> 00:02:30,980
So 4D homogeneous coordinates [x, y, z, 1] equals

39
00:02:30,980 --> 00:02:35,420
3D coordinates [x, y, z].

40
00:02:35,420 --> 00:02:38,380
Here w = 1.

41
00:02:38,380 --> 00:02:44,110
For example, the 3D coordinates p = [1, 2, 3],

42
00:02:44,110 --> 00:02:51,120
is converted into the 4D homogeneous p' = [1, 2, 3, 1].

43
00:02:51,120 --> 00:02:55,790
by adding w = 1 at the end of the coordinates.

44
00:02:55,790 --> 00:03:01,970
The 4D homogeneous coordinates, p = [2, 4, 6, 2],

45
00:03:01,970 --> 00:03:09,300
is converted into the 3D coordinates p = [1, 2, 3],

46
00:03:09,300 --> 00:03:15,840
by dividing 2, 4, 6, by w = 2.

47
00:03:15,840 --> 00:03:18,910
And these two above examples mean that

48
00:03:18,910 --> 00:03:21,670
the 4D homogeneous coordinates

49
00:03:21,670 --> 00:03:27,550
[1, 2, 3, 1] is the same as [2, 4, 6, 2].

50
00:03:27,550 --> 00:03:30,750
There are many reasons

51
00:03:30,750 --> 00:03:33,600
for using 4D homogeneous coordinates.

52
00:03:33,600 --> 00:03:36,130
However, the most intuitive reason

53
00:03:36,130 --> 00:03:40,480
is to express all possible transformation operations,

54
00:03:40,480 --> 00:03:44,770
such as translation, as 4 x 4 matrix operations.

55
00:03:44,770 --> 00:03:51,140
We will learn about this later in the transformation part.

56
00:03:51,140 --> 00:03:54,990
We're going to talk about basic openGL

57
00:03:54,990 --> 00:04:00,230
drawing using Program 02_HelloTriangle.

58
00:04:00,230 --> 00:04:04,290
So now it's time to look at a program that draws triangles.

59
00:04:04,290 --> 00:04:06,780
I defined the coordinates of the three vertexes of the triangles

60
00:04:06,780 --> 00:04:10,970
in a float array called vertices.

61
00:04:10,970 --> 00:04:13,580
The Z coordinates are all uniform to zero

62
00:04:13,580 --> 00:04:17,590
because we're going to draw a 2D triangle.

63
00:04:17,590 --> 00:04:20,470
The rest of the X and Y coordinates are

64
00:04:20,470 --> 00:04:25,520
all defined as coordinates within the NDC space.

65
00:04:25,520 --> 00:04:29,170
We're going to draw a triangle, so

66
00:04:29,170 --> 00:04:33,540
we've declared a variable VBO to store the ID of the VBO.

67
00:04:33,540 --> 00:04:38,920
Then, we call glenBuffers () to generate one buffer,

68
00:04:38,920 --> 00:04:42,940
and get an ID returned to VBO.

69
00:04:42,940 --> 00:04:47,220
To copy the data into the GL_ARRAY_BUFFER,

70
00:04:47,220 --> 00:04:52,710
we first bind the current VBO with glBindBuffer().

71
00:04:52,710 --> 00:04:55,430
Finally, we copy the data from the vertices

72
00:04:55,430 --> 00:05:01,510
into the VBO with glBufferData().

73
00:05:01,510 --> 00:05:10,150
Here, size found by sizeof() is representing current size of vertices.

74
00:05:10,150 --> 00:05:12,440
If you want to draw something,

75
00:05:12,440 --> 00:05:16,790
at least a very simple shader must exist.

76
00:05:16,790 --> 00:05:22,820
Shader is an independent program

77
00:05:22,820 --> 00:05:27,300
that takes over the objects to be drawn

78
00:05:27,300 --> 00:05:31,470
from the OpenGL program and gives commands to the GPU.

79
00:05:31,470 --> 00:05:35,850
Here we introduce a very simple vertex shader.

80
00:05:35,850 --> 00:05:38,980
At the top of the Vertex shader program

81
00:05:38,980 --> 00:05:44,060
is a version of the OpenGL Shading Language (GLSL).

82
00:05:44,060 --> 00:05:48,330
We are using version 3.3 here.

83
00:05:48,330 --> 00:05:52,230
The syntax of GLSL is similar to the C language.

84
00:05:52,230 --> 00:05:56,850
Our first vertex shader receives

85
00:05:56,850 --> 00:05:58,880
only one vertex attribute from the OpenGL program,

86
00:05:58,880 --> 00:06:04,000
that is, the vertex position coordinates.

87
00:06:04,000 --> 00:06:06,880
Remember that the attributes stored

88
00:06:06,880 --> 00:06:12,000
in the VBO previously were vertex coordinates.

89
00:06:12,000 --> 00:06:15,200
aPos is the "in" variable defined in the vertex shader.

90
00:06:15,200 --> 00:06:19,970
Its value flows from the OpenGL program

91
00:06:19,970 --> 00:06:24,870
to the vertex shader.

92
00:06:24,870 --> 00:06:28,870
layout (location = 0) is the location

93
00:06:28,870 --> 00:06:32,960
where variable exists, i.e, the address value.

94
00:06:32,960 --> 00:06:36,710
In this case, location is 0.

95
00:06:36,710 --> 00:06:40,570
The type of aPos variable is vec3.

96
00:06:40,570 --> 00:06:46,050
It stores x, y, z values ​​all at once in 3D vector.

97
00:06:46,050 --> 00:06:48,200
Now it's the body part of the vertex shader program

98
00:06:48,200 --> 00:06:52,720
that starts with void main ().

99
00:06:52,720 --> 00:06:55,040
A predefined variable named gl_Position

100
00:06:55,040 --> 00:06:59,040
is assigned a 4D homogeneous coordinates value

101
00:06:59,040 --> 00:07:03,940
by adding a value of w = 1.0

102
00:07:03,940 --> 00:07:09,260
to the input x, y, z value of aPos.

103
00:07:09,260 --> 00:07:10,910
This gl_Position variable is a value that represents the position

104
00:07:10,910 --> 00:07:15,500
that one vertex should actually have,

105
00:07:15,500 --> 00:07:19,920
and is used in future operations within the GPU.

106
00:07:19,920 --> 00:07:23,730
The source code for the simple vertex shader program

107
00:07:23,730 --> 00:07:26,960
introduced earlier was created as one long string.

108
00:07:26,960 --> 00:07:32,160
We create a vertex shader object with the glCreateShader().

109
00:07:32,160 --> 00:07:36,660
We assign the source code to it with the glShaderSource()

110
00:07:36,660 --> 00:07:42,260
We compile the vertex shader with the glCompileShader()

111
00:07:42,260 --> 00:07:45,120
The following part is where we check

112
00:07:45,120 --> 00:07:49,870
if there is an error while compiling the shader and handle it.

113
00:07:49,870 --> 00:07:53,390
The Fragment shader is one of two shaders

114
00:07:53,390 --> 00:07:55,860
that must exist for rendering,

115
00:07:55,860 --> 00:07:59,090
along with the Vertex shader.

116
00:07:59,090 --> 00:08:03,430
The Fragment shader is responsible for calculating the pixel color

117
00:08:03,430 --> 00:08:08,450
that should ultimately be displayed on the screen.

118
00:08:08,450 --> 00:08:12,500
Color is represented in RGBA format.

119
00:08:12,500 --> 00:08:17,460
Each of the four components, Red, Green, Blue, and Alpha,

120
00:08:17,460 --> 00:08:21,450
is represented by a value between 0 and 1.

121
00:08:21,450 --> 00:08:24,450
Alpha is a value that represents transparency,

122
00:08:24,450 --> 00:08:29,800
where 0 is completely transparent and 1 is completely opaque.

123
00:08:29,800 --> 00:08:33,880
FragColor is the "out" variable, which passes

124
00:08:33,880 --> 00:08:38,880
the color output of the final pixel to the display hardware.

125
00:08:38,880 --> 00:08:45,540
Here we've assigned a single color

126
00:08:45,540 --> 00:08:48,540
(1.0, 0.5, 0.2, 1.0) to the FragColor,

127
00:08:48,540 --> 00:08:52,660
which is the orange color of the triangle we saw earlier

128
00:08:52,660 --> 00:08:56,960
in the still image of the program running.

129
00:08:56,960 --> 00:08:59,480
This figure illustrates the relationship between

130
00:08:59,480 --> 00:09:03,370
the OpenGL application program, the vertex shader,

131
00:09:03,370 --> 00:09:05,800
and the fragment shader.

132
00:09:05,800 --> 00:09:09,710
Vertex attribute is passed from the application program

133
00:09:09,710 --> 00:09:12,020
to the vertex shader, where the final coordinates of the vertex,

134
00:09:12,020 --> 00:09:16,900
called gl_Position, are calculated

135
00:09:16,900 --> 00:09:19,900
and passed to the graphics hardware.

136
00:09:19,900 --> 00:09:22,940
On the other side, the color of a pixel is determined

137
00:09:22,940 --> 00:09:26,870
in the Fragment shader and passed to the hardware.

138
00:09:26,870 --> 00:09:31,270
In fact, there needs to be some information passed

139
00:09:31,270 --> 00:09:34,450
from the application program or the vertex shader

140
00:09:34,450 --> 00:09:38,280
to the fragment shader to determine the color,

141
00:09:38,280 --> 00:09:46,040
but that doesn't happen in this program yet.

142
00:09:46,040 --> 00:09:49,980
This part shows the source code

143
00:09:49,980 --> 00:09:53,300
of the fragment shader as a string

144
00:09:53,300 --> 00:09:56,280
in an OpenGL application and compiles it.

145
00:09:56,280 --> 00:10:01,310
The basic content is the same as compiling the vertex shader,

146
00:10:01,310 --> 00:10:05,820
so Let us skip it.

147
00:10:05,820 --> 00:10:09,930
Now it is time to create a shader program object

148
00:10:09,930 --> 00:10:12,390
with the compiled vertex and fragment shaders

149
00:10:12,390 --> 00:10:15,120
and link them together.

150
00:10:15,120 --> 00:10:20,680
The shader program object is created with glCreateProgram().

151
00:10:20,680 --> 00:10:24,410
The vertex and fragment shader objects are then attached

152
00:10:24,410 --> 00:10:27,900
to the created shader program object,

153
00:10:27,900 --> 00:10:31,990
which is done by the glAttachShader() function.

154
00:10:31,990 --> 00:10:36,590
After attaching, the shader program object is then linked

155
00:10:36,590 --> 00:10:40,360
using the glLinkProgram() function.

156
00:10:40,360 --> 00:10:42,700
Checking and handling linking errors is similar

157
00:10:42,700 --> 00:10:46,280
to the compile process.

158
00:10:46,280 --> 00:10:49,450
The vertex and fragment shader objects

159
00:10:49,450 --> 00:10:52,510
can be deleted because they are no longer needed

160
00:10:52,510 --> 00:10:56,880
after the shader program object is created.

161
00:10:56,880 --> 00:11:00,900
Using a shader program in an

162
00:11:00,900 --> 00:11:03,340
OpenGL application program is simple.

163
00:11:03,340 --> 00:11:09,510
All we need to do is specify a shader program object

164
00:11:09,510 --> 00:11:12,200
to use with the glUseProgram() function. From then on,

165
00:11:12,200 --> 00:11:17,130
the shader program will be responsible for all drawing.

166
00:11:17,130 --> 00:11:18,990
You can also create multiple shaders

167
00:11:18,990 --> 00:11:21,680
and select different shaders to use

168
00:11:21,680 --> 00:11:25,710
for rendering depending on the situation.

169
00:11:25,710 --> 00:11:29,080
Now let's take a look at the process of passing

170
00:11:29,080 --> 00:11:34,060
the vertex attributes contained in the VBO to the vertex shader.

171
00:11:34,060 --> 00:11:38,920
The VBO we created is in the format shown in this image.

172
00:11:38,920 --> 00:11:41,490
The 3D coordinates of the three vertices

173
00:11:41,490 --> 00:11:44,170
are put into the buffer one after the other,

174
00:11:44,170 --> 00:11:48,670
The coordinates for each dimension are float type,

175
00:11:48,670 --> 00:11:54,350
so they take up 32 bits, or 4 bytes.

176
00:11:54,350 --> 00:11:57,420
Therefore, we need 3 x 3 x 4 = 36 bytes

177
00:11:57,420 --> 00:12:03,440
for the three vertices.

178
00:12:03,440 --> 00:12:07,010
Also, there are no spaces, or any other kind of data,

179
00:12:07,010 --> 00:12:10,100
between the coordinates of the vertices.

180
00:12:10,100 --> 00:12:13,690
This means that the coordinates of one vertex are

181
00:12:13,690 --> 00:12:18,880
immediately followed by the coordinates of the next vertex.

182
00:12:18,880 --> 00:12:24,910
Overall, all data starts at the beginning of the buffer,

183
00:12:24,910 --> 00:12:28,590
which is why the offset value is given as 0.

184
00:12:28,590 --> 00:12:34,350
Stride is the number of bytes occupied 
by each vertex's attribute data.

185
00:12:34,350 --> 00:12:44,080
Here, it is 3 x 4 = 12, as we calculated above.

186
00:12:44,080 --> 00:12:48,400
We need to tell the vertex shader the structure of the VBO

187
00:12:48,400 --> 00:12:50,830
created by your OpenGL application

188
00:12:50,830 --> 00:12:54,730
so that the vertex shader can read

189
00:12:54,730 --> 00:12:57,850
the vertex attribute data correctly.

190
00:12:57,850 --> 00:13:03,790
The function that does this is glVertexAttribPointer().

191
00:13:03,790 --> 00:13:09,040
In this example, location refers to the location of the variable

192
00:13:09,040 --> 00:13:11,440
in the vertex shader, which has a value of 0.

193
00:13:11,440 --> 00:13:15,260
The number of Components is 3 because it is xyz.

194
00:13:15,260 --> 00:13:19,440
The type is GL_FLOAT.

195
00:13:19,440 --> 00:13:25,520
The normalized parameter is true  if the attribute values are

196
00:13:25,520 --> 00:13:29,570
normalized between the range [0, 1],

197
00:13:29,570 --> 00:13:34,690
In this case, we don't do any special calculations

198
00:13:34,690 --> 00:13:38,220
on the vertex coordinates values, so we leave it GL_FALSE.

199
00:13:38,220 --> 00:13:44,140
Stride is the number of bytes occupied by the attributes in

200
00:13:44,140 --> 00:13:50,690
one vertex portion, so we set it to 3 * sizeof(float).

201
00:13:50,690 --> 00:13:56,010
offset is 0 because the first data is

202
00:13:56,010 --> 00:13:59,340
starting from the beginning of the buffer.

203
00:13:59,340 --> 00:14:02,820
glEnableVertexAttribArray() enables the variable location = 0

204
00:14:02,820 --> 00:14:07,460
in the vertex shader

205
00:14:07,460 --> 00:14:13,590
based on the information provided by glVertexAttribPointer().

206
00:14:13,590 --> 00:14:17,210
In this way, the glVertexAttribPointer and

207
00:14:17,210 --> 00:14:21,510
glEnableVertexAttribArray functions are

208
00:14:21,510 --> 00:14:25,100
paired and used together.

209
00:14:25,100 --> 00:14:29,060
VAO stands for Vertex Array Object,

210
00:14:29,060 --> 00:14:32,010
which is an object that contains

211
00:14:32,010 --> 00:14:35,970
multiple VBOs at once.

212
00:14:35,970 --> 00:14:38,830
When an object is often represented

213
00:14:38,830 --> 00:14:41,470
by a combination of multiple VBOs,

214
00:14:41,470 --> 00:14:46,970
it can be complicated to bind and render them individually.

215
00:14:46,970 --> 00:14:51,780
VAOs simplify this process.

216
00:14:51,780 --> 00:14:59,400
In the illustration, the first object stores

217
00:14:59,400 --> 00:15:03,760
its position attribute in VBO1 and its color attribute in VBO2.

218
00:15:03,760 --> 00:15:09,950
We can bind these two VBOs into a single VAO1,

219
00:15:09,950 --> 00:15:12,850
and by binding only VAO1,

220
00:15:12,850 --> 00:15:16,800
we can easily specify the render state.

221
00:15:16,800 --> 00:15:19,470
On the other hand, the second object at the bottom

222
00:15:19,470 --> 00:15:24,410
has both the position and color attributes

223
00:15:24,410 --> 00:15:26,760
stored in a single VBO3.

224
00:15:26,760 --> 00:15:36,000
In this case, we can still have VAO2 contain the VBO3.

225
00:15:36,000 --> 00:15:42,110
We use the glGenVertexArray() to generate a VAO.

226
00:15:42,110 --> 00:15:46,720
Then, we creates the VBOs that will belong to the VAO.

227
00:15:46,720 --> 00:15:51,020
And call glBindVertexArray to bind the VAO.

228
00:15:51,020 --> 00:15:57,080
After that, perform normal VBO operations.

229
00:15:57,080 --> 00:16:00,870
We bind the VBO, copy the data,

230
00:16:00,870 --> 00:16:05,120
and pass the attributes to the vertex shader.

231
00:16:05,120 --> 00:16:10,900
Any VBOs that are created while one VAO is bound

232
00:16:10,900 --> 00:16:16,410
in this way will belong to the currently bound VAO.

233
00:16:16,410 --> 00:16:23,200
Now that the VBO belongs to a VAO, it's easy to specify

234
00:16:23,200 --> 00:16:27,510
what to draw when the appropriate VAO is selected.

235
00:16:27,510 --> 00:16:32,350
In the Rendering loop, we specify the VAO and shader

236
00:16:32,350 --> 00:16:38,370
to draw and use glDrawArrays() to render the primitive.

237
00:16:38,370 --> 00:16:43,120
The parameter to glDrawArrays specifies the primitive,

238
00:16:43,120 --> 00:16:47,960
which in this case is GL_TRIANGLES.

239
00:16:47,960 --> 00:16:52,590
The following parameters specify

240
00:16:52,590 --> 00:16:58,690
the starting index of the VAO and the number of vertices.

241
00:16:58,690 --> 00:17:02,550
There are several primitives that

242
00:17:02,550 --> 00:17:05,290
OpenGL can draw, such as GL_TRIANGLES.

243
00:17:05,290 --> 00:17:12,470
The numbering of the vertices in the figure indicates 
the order of the vertices stored in the VBO.

244
00:17:12,470 --> 00:17:16,830
GL_POINTS draws points one by one,

245
00:17:16,830 --> 00:17:23,080
GL_LINES draws line segments

246
00:17:23,080 --> 00:17:27,400
connecting two consecutive vertices.

247
00:17:27,400 --> 00:17:32,190
GL_LINE_LOOP will render a loop

248
00:17:32,190 --> 00:17:35,800
connecting the last vertex to the first vertex.

249
00:17:35,800 --> 00:17:38,430
GL_LINE_STRIP draws a line connecting

250
00:17:38,430 --> 00:17:42,640
a series of given vertices one after the other.

251
00:17:42,640 --> 00:17:45,700
GL_TRIANGLES draws triangles

252
00:17:45,700 --> 00:17:50,700
with the given vertices in groups of three.

253
00:17:50,700 --> 00:17:53,380
GL_TRIANGLE_STRIP defines a triangle

254
00:17:53,380 --> 00:17:56,760
with the first three given vertices

255
00:17:56,760 --> 00:18:00,610
and creates a new triangle

256
00:18:00,610 --> 00:18:04,620
for each additional given vertex.

257
00:18:04,620 --> 00:18:09,340
GL_TRIANGLE_FAN is similar to GL_TRIANGLE_STRIP,

258
00:18:09,340 --> 00:18:12,360
except that it creates triangles

259
00:18:12,360 --> 00:18:14,860
centered on

260
00:18:14,860 --> 00:18:18,830
the first given vertex.

261
00:18:18,830 --> 00:18:27,020
There are no other primitives defined for 
rectangles or other polygons.

262
00:18:27,020 --> 00:18:33,250
This figure shows the different stages of the graphics pipeline.

263
00:18:33,250 --> 00:18:37,960
The vertex data passed to the GPU goes through

264
00:18:37,960 --> 00:18:43,570
vertex shader, shape assembly, geometry shader,

265
00:18:43,570 --> 00:18:47,460
rasterization, fragment shader, and tests and blending

266
00:18:47,460 --> 00:18:52,460
to become visible on the screen.

267
00:18:52,460 --> 00:18:58,390
The parts of the steps that are colored blue

268
00:18:58,390 --> 00:19:01,200
are shaders which are programmable.

269
00:19:01,200 --> 00:19:05,170
The gray steps are features provided by the GPU

270
00:19:05,170 --> 00:19:07,650
, often built into the hardware,

271
00:19:07,650 --> 00:19:11,370
that allow for very fast processing.

272
00:19:11,370 --> 00:19:17,010
In this course, we will only be studying

273
00:19:17,010 --> 00:19:19,270
vertex shader and fragment shader.
