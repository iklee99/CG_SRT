1
00:00:00,000 --> 00:00:03,200
Let's start the lecture on Quaternion.

2
00:00:03,200 --> 00:00:05,840
One of the efficient

3
00:00:05,840 --> 00:00:08,620
and stable ways to calculate rotation in 3D

4
00:00:08,620 --> 00:00:11,480
is to use quaternion.

5
00:00:11,480 --> 00:00:16,610
Quaternion is a 4-dimensional vector (q0, q1, q2, q3),

6
00:00:16,610 --> 00:00:18,440
which can be seen as consisting of one scalar q0

7
00:00:18,440 --> 00:00:23,490
and one 3D vector

8
00:00:23,490 --> 00:00:26,500
q = (q1, q2, q3).

9
00:00:26,500 --> 00:00:30,720
Quaternion theory has many complexities,

10
00:00:30,720 --> 00:00:34,120
but in our course we will introduce

11
00:00:34,120 --> 00:00:38,270
only the bare minimum that will be used to calculate rotation.

12
00:00:38,270 --> 00:00:41,010
First, we are given two quaternions a = (q0,q) and b = (p0 p).

13
00:00:41,010 --> 00:00:47,130
The sum of two quaternions

14
00:00:47,130 --> 00:00:52,700
a + b is the sum of normal 4D vectors,

15
00:00:52,700 --> 00:00:55,640
and is calculated by adding the corresponding elements.

16
00:00:55,640 --> 00:00:59,340
The product ab of two quaternions

17
00:00:59,340 --> 00:01:02,750
is calculated as the equation given here.

18
00:01:02,750 --> 00:01:08,800
Here, the dot product and cross product of the 3D vectors

19
00:01:08,800 --> 00:01:13,730
q and p included in a and b were used.

20
00:01:13,730 --> 00:01:16,830
Quaternion size (magnitude, size)

21
00:01:16,830 --> 00:01:21,020
is the size of a normal 4D vector.

22
00:01:21,020 --> 00:01:26,150
The inverse a^(-1) for Quaternion multiplication

23
00:01:26,150 --> 00:01:27,840
is defined as this equation.

24
00:01:27,840 --> 00:01:34,690
The product of a and a^(-1) gives the identity (1, 0) for multiplication.

25
00:01:34,690 --> 00:01:37,560
You can use quternion to rotate a 3D point

26
00:01:37,560 --> 00:01:40,710
about an arbitrary axis.

27
00:01:40,710 --> 00:01:45,750
First, create quaternio p = (0, u) with the 3D point

28
00:01:45,750 --> 00:01:51,170
u = (x,y,z) to be rotated.

29
00:01:51,170 --> 00:01:56,060
Rotation axis is given as unit vector v.

30
00:01:56,060 --> 00:02:00,420
Now let’s look at how to find u’,

31
00:02:00,420 --> 00:02:08,580
which is the result of rotating u about the v-axis by theta, i.e.

32
00:02:08,580 --> 00:02:11,930
u’ = 𝑅_𝑣(𝜃)𝑢. First, create a unit quaternion r:

33
00:02:11,930 --> 00:02:16,350
And we define the inverse of r as follows:

34
00:02:16,350 --> 00:02:20,130
The inverse of r is also a unit quaternion.

35
00:02:20,130 --> 00:02:25,800
Then p’ = (0, u’) is obtained by the equation:

36
00:02:25,800 --> 00:02:30,980
p’ = r p r^(-1) Conversion

37
00:02:30,980 --> 00:02:33,700
between quaternion and rotation

38
00:02:33,700 --> 00:02:36,660
matrix forms is possible.

39
00:02:36,660 --> 00:02:41,180
Given that the quaternion r representing rotation is given like this,

40
00:02:41,180 --> 00:02:45,920
the corresponding rotation matrix is given as follows.

41
00:02:45,920 --> 00:02:50,230
The RotAxis program creates a 3D cube

42
00:02:50,230 --> 00:02:54,870
and rotates it about a random axis.

43
00:02:54,870 --> 00:02:57,240
If you press q on the keyboard,

44
00:02:57,240 --> 00:02:59,380
rotation will be calculated using quaternion,

45
00:02:59,380 --> 00:03:03,520
and if you press m, it will be calculated using matrix.

46
00:03:03,520 --> 00:03:07,300
In reality, there is no difference between the two methods,

47
00:03:07,300 --> 00:03:13,090
so there is no loss of rotation when the method is changed.

48
00:03:13,090 --> 00:03:17,940
GLM supports quaternion functions.

49
00:03:17,940 --> 00:03:23,970
To use them, include the header file above.

50
00:03:23,970 --> 00:03:29,500
In this program, you will draw a cube, a 3D object, for the first time.

51
00:03:29,500 --> 00:03:33,720
Since we will continue to use cubes many times in the future,

52
00:03:33,720 --> 00:03:40,480
we have defined a Cube class that will be used to create and draw cubes.

53
00:03:40,480 --> 00:03:44,780
It is contained in cube.h in the utils folder,

54
00:03:44,780 --> 00:03:49,310
and all implementations are included in the header.

55
00:03:49,310 --> 00:03:52,540
In the Cube class, data such as the coordinates

56
00:03:52,540 --> 00:03:57,830
of vertices for the cube object are already defined.

57
00:03:57,830 --> 00:04:03,910
Cube vertex position has three coordinates of x, y, and z for four vertices

58
00:04:03,910 --> 00:04:06,400
on each of the six faces,

59
00:04:06,400 --> 00:04:12,250
so a total of 72 (6 x 4 x 3) elements exist in the cubeVertices array.

60
00:04:12,250 --> 00:04:15,120
The default coordinates represent the coordinates of a cube

61
00:04:15,120 --> 00:04:18,430
with the origin as the center

62
00:04:18,430 --> 00:04:24,010
and all edges having a length of 1.

63
00:04:24,010 --> 00:04:27,170
In addition, normal and texture coordinates are data that will be used in the rendering methods

64
00:04:27,170 --> 00:04:32,050
we will learn in the future.

65
00:04:32,050 --> 00:04:36,300
In addition, the colors of the faces are also defined.

66
00:04:36,300 --> 00:04:39,180
cubeIndices defines indices to use

67
00:04:39,180 --> 00:04:42,920
for DrawElements.

68
00:04:42,920 --> 00:04:45,270
In the Cube class, VAO, VBO, and EBO

69
00:04:45,270 --> 00:04:49,840
are defined for drawing a cube.

70
00:04:49,840 --> 00:04:52,030
A default constructor exists so that all necessary

71
00:04:52,030 --> 00:04:57,170
buffers can be created and initialized.

72
00:04:57,170 --> 00:04:59,610
With the second constructor,

73
00:04:59,610 --> 00:05:02,730
you can change the coordinates

74
00:05:02,730 --> 00:05:06,180
by changing the default vertex positions.

75
00:05:06,180 --> 00:05:08,900
The center position of the initially positioned cube

76
00:05:08,900 --> 00:05:11,790
can be changed to (dx,

77
00:05:11,790 --> 00:05:14,960
dy, dz), and the initial size

78
00:05:14,960 --> 00:05:18,210
can be changed by applying uniform scale factor s.

79
00:05:18,210 --> 00:05:25,220
The draw() function draws a cube using the given shader.

80
00:05:25,220 --> 00:05:28,910
The program first defines global variables,

81
00:05:28,910 --> 00:05:33,890
and axis defines the rotation axis around which the cube will rotate.

82
00:05:33,890 --> 00:05:37,210
Here it is given as (1, 1, 1).

83
00:05:37,210 --> 00:05:42,540
Additionally, we defined the initial position of the cube (here

84
00:05:42,540 --> 00:05:47,010
(0.4, 0.4, 0)) and the initial size (here: 0.3).

85
00:05:47,010 --> 00:05:51,010
In main(), we create cube as a constructor.

86
00:05:51,010 --> 00:05:56,460
The rotation axis is normalized to a unit vector in advance.

87
00:05:56,460 --> 00:05:59,560
In the render function,

88
00:05:59,560 --> 00:06:03,870
first prepare a transformation matrix initialized with identity.

89
00:06:03,870 --> 00:06:10,510
If the rotState changed by keyboard input is MAT_ROT,

90
00:06:10,510 --> 00:06:15,710
glm::rotate is used to create a transform matrix.

91
00:06:15,710 --> 00:06:21,690
If rotState is QUAT_ROT, quaternion is used.

92
00:06:21,690 --> 00:06:27,170
The GLM function glm::angleAxis creates a quaternion

93
00:06:27,170 --> 00:06:30,990
corresponding to rotation with the given axis and angle.

94
00:06:30,990 --> 00:06:34,980
You can convert this to a rotation

95
00:06:34,980 --> 00:06:37,640
matrix using the glm::toMat4 function

96
00:06:37,640 --> 00:06:41,520
and use this as a transform matrix.

97
00:06:41,520 --> 00:06:47,130
In the remaining part, the transform matrix is passed to the shader

98
00:06:47,130 --> 00:06:50,850
and the cube is drawn by calling cube->draw().

99
00:06:50,850 --> 00:06:54,530
The vertex shader defines vectors of position,

100
00:06:54,530 --> 00:06:56,210
normal, color, and texture coordinates through which cube class

101
00:06:56,210 --> 00:06:59,280
data is transmitted.

102
00:06:59,280 --> 00:07:03,860
Of course normal and texture coordinates are not used yet.

103
00:07:03,860 --> 00:07:06,450
However, because the Cube class is implemented

104
00:07:06,450 --> 00:07:11,200
to always copy these data to the VBO,

105
00:07:11,200 --> 00:07:13,740
these four attributes must be received from the vertex shader.

106
00:07:13,740 --> 00:07:16,050
This is the toColor out

107
00:07:16,050 --> 00:07:21,870
variable that will be passed to the Fragment shader.

108
00:07:21,870 --> 00:07:27,810
The transform matrix is passed as a uniform variable.

109
00:07:27,810 --> 00:07:31,430
gl_Position is calculated by multiplying the transform

110
00:07:31,430 --> 00:07:36,700
matrix by the original position.
