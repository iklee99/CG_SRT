1
00:00:00,000 --> 00:00:03,130
Transformations에 대한 강의 시작하겠습니다.

2
00:00:03,130 --> 00:00:06,770
Frame은 축을 이루는 basis의 set v과

3
00:00:06,770 --> 00:00:09,440
origin P0를 가지고 있습니다.

4
00:00:09,440 --> 00:00:16,830
우리는 frame을 (v1,v2,v3,P0)=(v,P0) 로 표현합니다.

5
00:00:16,830 --> 00:00:19,280
Point P는 frame을 사용하여

6
00:00:19,280 --> 00:00:25,790
P = P0 + b^T v 로 유일하게 표현됩니다.

7
00:00:25,790 --> 00:00:30,200
여기서 b = (beta1, beta2, beta3)는

8
00:00:30,200 --> 00:00:34,970
frame (v, P0) 에 관한 point P의 coordinates입니다.

9
00:00:34,970 --> 00:00:38,080
point P의 경우는 고정된 position이 있기 때문에

10
00:00:38,080 --> 00:00:41,280
basis만으로는 표현이 불가능하며,

11
00:00:41,280 --> 00:00:46,050
basis에 origin이 추가된 frame으로 표현이 가능합니다.

12
00:00:46,050 --> 00:00:48,560
이제 3차원에서 사용되는 몇가지 기본적인

13
00:00:48,560 --> 00:00:51,860
transformation에 대해 알아 보겠습니다.

14
00:00:51,860 --> 00:00:55,410
먼저 translation (평행이동) 입니다.

15
00:00:55,410 --> 00:00:59,530
한 점 P를 d 만큼 translation해서

16
00:00:59,530 --> 00:01:02,920
P'으로 이동시키는 경우를 말합니다.

17
00:01:02,920 --> 00:01:07,250
하나의 3D object를 이루고 있는 모든 vertex들을

18
00:01:07,250 --> 00:01:09,800
d 만큼 translation 시키면

19
00:01:09,800 --> 00:01:14,580
자연히 object 자체가 d만큼 translation되게 됩니다.

20
00:01:14,580 --> 00:01:19,010
Translation을 matrix 형태로 나타내 보겠습니다.

21
00:01:19,010 --> 00:01:24,340
원래의 점 p와 translation 된 후의 position p'을

22
00:01:24,340 --> 00:01:29,330
모두 homogenous coordinates인 4D vector들로 나타내었습니다.

23
00:01:29,330 --> 00:01:38,290
이 때, 4 x 4 matrix T(ax,ay,az)를 이렇게 정의하는데,

24
00:01:38,290 --> 00:01:42,520
d=(ax,ay,az)는 translation factor 입니다.

25
00:01:42,520 --> 00:01:46,970
자세히 보면, identity matrix에 맨 오른쪽 column에

26
00:01:46,970 --> 00:01:54,540
translation factor들인 ax,ay,az를 차례로 배치한 형태입니다.

27
00:01:54,540 --> 00:01:57,000
이 translation matrix T를

28
00:01:57,000 --> 00:01:59,570
original point P에 곱하여

29
00:01:59,570 --> 00:02:03,890
Tp를 계산하면 p'이 나오게 됩니다.

30
00:02:03,890 --> 00:02:07,540
이것은 translation의 정의에 잘 맞습니다.

31
00:02:07,540 --> 00:02:10,640
앞으로는 translation operation과

32
00:02:10,640 --> 00:02:12,970
translation matrix T 가

33
00:02:12,970 --> 00:02:17,670
종종 같은 의미로 사용되는 경우들을 보게 될 것입니다.

34
00:02:17,670 --> 00:02:24,130
그러면 한번 d=(ax,ay,az) 만큼 translation 했다가

35
00:02:24,130 --> 00:02:35,060
다시 -d=(-ax,-ay,-az) 만큼 translation하는 경우를 생각해 봅니다.

36
00:02:35,060 --> 00:02:40,550
point p 는 d 만큼 translation되어서 p'으로 갔다가

37
00:02:40,550 --> 00:02:46,130
다시 -d 만큼 translation되어 p로 돌아가게 됩니다.

38
00:02:46,130 --> 00:02:54,850
p' = Tp 였으므로 양변에 T의 역행렬 T^(-1)을 곱해주면,

39
00:02:54,850 --> 00:02:56,010
p = T^(-1)p' 이 됩니다.

40
00:02:56,010 --> 00:03:03,290
즉, inverse translation의 matrix는

41
00:03:03,290 --> 00:03:07,530
original translation의 matrix T의 역행렬이 되는 것입니다.

42
00:03:07,530 --> 00:03:10,560
그러면 -d 만큼의 translation,

43
00:03:10,560 --> 00:03:14,230
즉, 원래 transation의 inverse translation을

44
00:03:14,230 --> 00:03:17,690
나타내는 matrix는 어떻게 될까요.

45
00:03:17,690 --> 00:03:22,080
이것은 T의 역행렬 T^(-1)과 같은데,

46
00:03:22,080 --> 00:03:25,580
이를 구해보면 식과 같이 나옵니다.

47
00:03:25,580 --> 00:03:31,690
이는 -d = (-ax,-ay,-az) 일때

48
00:03:31,690 --> 00:03:35,620
우리가 정의 했던 translation matrix를 만드는 방법으로

49
00:03:35,620 --> 00:03:39,940
만들어진 경우와 정확히 일치합니다.

50
00:03:39,940 --> 00:03:42,580
이번에는 rotation을 정의할 것인데,

51
00:03:42,580 --> 00:03:45,670
설명을 간단히 하기 위해 2D rotation의 경우를

52
00:03:45,670 --> 00:03:48,080
먼저 살펴보겠습니다.

53
00:03:48,080 --> 00:03:51,180
2D의 point (x, y)를 theta만큼

54
00:03:51,180 --> 00:03:53,990
시계반대방향으로 회전시켰을 때 나오는 point를

55
00:03:53,990 --> 00:03:56,660
(x',y') 이라 합시다.

56
00:03:56,660 --> 00:04:00,290
이때 원래의 x는 rho cos(phi),

57
00:04:00,290 --> 00:04:03,710
y는 rho sin(phi)로 나타낼 수 있습니다.

58
00:04:03,710 --> 00:04:07,700
여기서 rho는 원점에서 (x,y) 까지의 거리로,

59
00:04:07,700 --> 00:04:09,260
우리가 잘 알고 있듯이,

60
00:04:09,260 --> 00:04:14,160
square root of (x^2 + y^2) 입니다.

61
00:04:14,160 --> 00:04:19,340
theta만큼 회전 후의 결과 x'과 y'은 각각

62
00:04:19,340 --> 00:04:24,260
rho cos(theta+phi), rho sin(theta + phi)로

63
00:04:24,260 --> 00:04:26,030
나타낼 수 있습니다.

64
00:04:26,030 --> 00:04:30,020
sine, cosine 공식을 사용하면 x'과 y'은

65
00:04:30,020 --> 00:04:33,130
각각 이렇게 풀어서 나타낼 수 있습니다.

66
00:04:33,130 --> 00:04:36,840
여기에서 rho cos(phi)와 rho sin(phi)를

67
00:04:36,840 --> 00:04:40,950
x와 y로 대치하면, 이와 같은 식이 나옵니다.

68
00:04:40,950 --> 00:04:45,760
이것이 (x,y)를 theta만큼 회전하였을 때의 결과

69
00:04:45,760 --> 00:04:47,830
(x',y')을 구하는 식이 되겠습니다.

70
00:04:47,830 --> 00:04:51,150
마지막으로, 이 식을 matrix 형태로 정리하면

71
00:04:51,150 --> 00:04:52,560
이와 같이 됩니다.

72
00:04:52,560 --> 00:04:56,850
여기서 cosine과 sine으로 이루어진 2 x 2 matrix는

73
00:04:56,850 --> 00:05:00,140
2D rotation의 matrix가 됩니다.

74
00:05:00,140 --> 00:05:01,580
이제 차원을 높여서

75
00:05:01,580 --> 00:05:04,240
3D에서의 회전을 정의하려고 합니다.

76
00:05:04,240 --> 00:05:07,810
2D에서의 회전에서 회전축은 항상 (0,0,1),

77
00:05:07,810 --> 00:05:10,230
즉, z 축이었습니다.

78
00:05:10,230 --> 00:05:12,060
그러나, 3D에서는 무한히 많은

79
00:05:12,060 --> 00:05:14,220
rotation 축들이 가능합니다.

80
00:05:14,220 --> 00:05:16,870
먼저 2D에서 사용했던 z축에 관해

81
00:05:16,870 --> 00:05:19,070
3D rotation을 정의하면

82
00:05:19,070 --> 00:05:20,980
이 식과 같이 됩니다.

83
00:05:20,980 --> 00:05:25,950
(x,y,z)를 theta만큼 z축에 관해 회전시켜 보면,

84
00:05:25,950 --> 00:05:29,870
x'과 y'은 2D 회전 때와 같고,

85
00:05:29,870 --> 00:05:33,040
z'은 z와 같게 남아 있습니다.

86
00:05:33,040 --> 00:05:35,290
z축이 회전축이기 때문에

87
00:05:35,290 --> 00:05:38,280
z축에 관해 어떤 점을 회전시키더라도

88
00:05:38,280 --> 00:05:42,650
회전이 z축과 수직인 xy평면 상에서 이루어 지기 때문에,

89
00:05:42,650 --> 00:05:45,680
z좌표는 변하지 않는 것이죠.

90
00:05:45,680 --> 00:05:46,910
matrix를 이용하면,

91
00:05:46,910 --> 00:05:51,540
이를  p' = Rz p 로 표현할 수 있습니다.

92
00:05:51,540 --> 00:05:53,550
여기서 Rz(theta)는

93
00:05:53,550 --> 00:05:56,880
z 축에 관해 theta 만큼의 회전을 나타내는

94
00:05:56,880 --> 00:05:59,610
4 x 4 rotation matrix 입니다.

95
00:05:59,610 --> 00:06:04,110
자세히 보면, Rz(theta)의 왼쪽 상단의 2 x 2 부분은

96
00:06:04,110 --> 00:06:08,820
이전 슬라이드에서 본 2D rotation matrix와 같습니다.

97
00:06:08,820 --> 00:06:11,950
나머지 부분은 대각선 원소들 만이 1인

98
00:06:11,950 --> 00:06:15,680
일반적인 transformation matrix의 형태 입니다.

99
00:06:15,680 --> 00:06:19,570
그렇다면, 왜 3D 에서 rotation matrix는

100
00:06:19,570 --> 00:06:23,710
3 x 3 가 아닌 4 x 4 matrix로 표현 되었을까요.

101
00:06:23,710 --> 00:06:27,680
그것은 앞서 설명한 translation matrix 때문입니다.

102
00:06:27,680 --> 00:06:30,930
앞서 보았듯이, translation matrix는

103
00:06:30,930 --> 00:06:34,390
3 x 3 matrix로는 나타낼 수 없으며,

104
00:06:34,390 --> 00:06:37,930
homogenous coordinates를 사용해야 합니다.

105
00:06:37,930 --> 00:06:41,800
Data structure의 관점에서 모든 transformation matrix들을

106
00:06:41,800 --> 00:06:44,300
하나의 type으로 나타내어야 한다면,

107
00:06:44,300 --> 00:06:49,940
이러한 이유 때문에 3 x 3가 아닌 4 x 4 matrix를 사용하는 것입니다.

108
00:06:49,940 --> 00:06:53,770
이제 x축과 y축에 관한 rotation을 보도록 하죠.

109
00:06:53,770 --> 00:06:59,130
먼저 x축에 관한 회전 matrix Rx(theta)는 이와 같이 표현됩니다.

110
00:06:59,130 --> 00:07:02,750
자세히 보면, 2 x 2의 rotation 부분이

111
00:07:02,750 --> 00:07:05,080
matrix의 가운데에 몰려있게 됩니다.

112
00:07:05,080 --> 00:07:09,800
유사하게 y축에 관한 회전 matrix는 이와 같습니다.

113
00:07:09,800 --> 00:07:12,430
theta만큼 회전하는 rotation 변환 R(theta)를

114
00:07:12,430 --> 00:07:17,920
(x,y)에 적용하여 (x',y') 얻었다고 합시다.

115
00:07:17,920 --> 00:07:21,710
이제 (x',y') 에서 다시 (x,y)로 돌아가는

116
00:07:21,710 --> 00:07:26,670
역회전 transformation R^(-1)(theta) 에 대해 보겠습니다.

117
00:07:26,670 --> 00:07:32,020
개념적으로 R^(-1)는 R(-theta)와 같습니다.

118
00:07:32,020 --> 00:07:37,290
즉, theta만큼 회전한 후, 원래의 position으로 다시 돌아가는 회전은

119
00:07:37,290 --> 00:07:40,240
-theta만큼 회전하는 것입니다.

120
00:07:40,240 --> 00:07:43,500
우리가 x, y, z축에 관한 rotation들에서

121
00:07:43,500 --> 00:07:46,610
cos(theta)와 sin(theta)값들을 사용했었습니다.

122
00:07:46,610 --> 00:07:50,550
이 식의 theta대신에 -theta를 넣어주면,

123
00:07:50,550 --> 00:07:53,850
cos(-theta)는 cos(theta)와 같고,

124
00:07:53,850 --> 00:07:57,800
sin(-theta)는 -sin(theta) 와 같습니다.

125
00:07:57,800 --> 00:08:00,660
그러니까 R(-theta)의 matrix는

126
00:08:00,660 --> 00:08:04,890
R(theta)를 약간 바꾸어 쉽게 구할 수 있습니다.

127
00:08:04,890 --> 00:08:10,120
다른 의미로 R^(-1)은 R의 역행렬입니다.

128
00:08:10,120 --> 00:08:16,790
그런데 실제로 R^(-1)를 구해보면, R^T와 같게 나옵니다.

129
00:08:16,790 --> 00:08:20,070
matrix의 transpose는 matrix의 행과 열을

130
00:08:20,070 --> 00:08:22,510
서로 바꾸는 operation을 말합니다.

131
00:08:22,510 --> 00:08:26,610
정리해보면, R이 주어졌을때,

132
00:08:26,610 --> 00:08:31,780
R^(-1)와 R(-theta), 그리고 R^T는 모두 같게 됩니다.

133
00:08:31,780 --> 00:08:34,180
Transformation중에 rotation과 translation은

134
00:08:34,180 --> 00:08:35,780
rigid transformation 또는

135
00:08:35,780 --> 00:08:39,010
rigid-body transformation이라 부릅니다.

136
00:08:39,010 --> 00:08:42,690
그 의미는 rotation과 translation의 경우

137
00:08:42,690 --> 00:08:45,270
어떤 순서로 얼마나 반복 하는지에 상관없이

138
00:08:45,270 --> 00:08:50,590
transform하는 object의 모양이나 size를 바꾸지 않기 때문입니다.

139
00:08:50,590 --> 00:08:53,870
그림에서 보면 reflection transformation도

140
00:08:53,870 --> 00:08:56,400
rigid transformation에 속합니다.

141
00:08:56,400 --> 00:08:59,380
reflection은 어떤 기준 축을 중심으로

142
00:08:59,380 --> 00:09:03,730
object를 거울에 비추듯 반영하는 transformation 입니다.

143
00:09:03,730 --> 00:09:05,320
Rigid transformation은

144
00:09:05,320 --> 00:09:10,100
다만 object의 location과 orientation을 바꿀 뿐입니다.

145
00:09:10,100 --> 00:09:15,400
반면에 non-rigid transformation의 경우 물체의 크기를 바꿀 수도 있고,

146
00:09:15,400 --> 00:09:20,460
찌그러뜨린다든지 해서, 물체의 모양 자체를 바꿀 수도 있습니다.

147
00:09:20,460 --> 00:09:25,070
Scaling은 물체의 크기를 변화시키는 transformation입니다.

148
00:09:25,070 --> 00:09:27,010
물체의 크기를 모든 축에 따라

149
00:09:27,010 --> 00:09:30,100
일정하게 바꾸는 uniform scaling도 가능하고,

150
00:09:30,100 --> 00:09:33,200
축 방향에 따라서 통일되지 않은 크기로 변화시키는

151
00:09:33,200 --> 00:09:37,210
non-uniform scaling도 가능합니다.

152
00:09:37,210 --> 00:09:41,600
Scaling은 non-rigid transformation의 한 종류 입니다.

153
00:09:41,600 --> 00:09:45,030
Scaling은 원점으로부터 point (x,y,z) 까지의

154
00:09:45,030 --> 00:09:47,710
거리를 바꾸는 것으로 생각할 수 있습니다.

155
00:09:47,710 --> 00:09:53,210
x까지의 거리를 beta_x 배 만큼, y까지의 거리는 beta_y 배 만큼,

156
00:09:53,210 --> 00:09:57,680
z까지의 거리를 beta_z 배 만큼 바꾸는 식은 이와 같습니다.

157
00:09:57,680 --> 00:10:02,970
여기서 (beta_x, beta_y, beta_z)를 scaling factor라 부릅니다.

158
00:10:02,970 --> 00:10:09,810
예를 들면 beta_x를 0.5로 하면, x방향의 거리는 원래 거리의 반이 될 것입니다.

159
00:10:09,810 --> 00:10:12,470
만일 beta_x, beta_y, beta_z가

160
00:10:12,470 --> 00:10:15,790
모두 같은 값이면 uniform scaling이 되고,

161
00:10:15,790 --> 00:10:18,850
같지 않으면 non-uniform scaling이 됩니다.

162
00:10:18,850 --> 00:10:24,730
이처럼 p' = Sp 와 같이 scaling transformation을 나타낼 때,

163
00:10:24,730 --> 00:10:29,400
matrix S는 4x4의 scaling matrix 이며,

164
00:10:29,400 --> 00:10:34,830
대각선 원소들에 beta_x, beta_y, beta_z가 위치 합니다.

165
00:10:34,830 --> 00:10:39,220
(x, y)를 (beta_x, beta_y, beta_z) 만큼 scaling 해서

166
00:10:39,220 --> 00:10:41,490
(x', y')으로 보냈다고 가정합니다.

167
00:10:41,490 --> 00:10:47,050
이때 (x', y')을 다시 (x, y)로 되돌리는

168
00:10:47,050 --> 00:10:53,330
inverse scaling S^(-1)은 S(1/beta_x, 1/beta_y, 1/beta_z),

169
00:10:53,330 --> 00:10:56,550
즉 scaling factor의 역수를 취해 주면 됩니다.

170
00:10:56,550 --> 00:10:57,950
자세한 설명이 없이도,

171
00:10:57,950 --> 00:11:01,340
왜 그런지는 직관적으로 잘 이해할 수 있습니다.

172
00:11:01,340 --> 00:11:03,180
Shearing transformation은

173
00:11:03,180 --> 00:11:07,110
그림과 같이 원래의 object를 기울여 찌그러뜨리는 역할을 합니다.

174
00:11:07,110 --> 00:11:11,770
이를 자세히 보기 위해 xy 평면상의 단면을 살펴 보겠습니다.

175
00:11:11,770 --> 00:11:16,430
그림에서, 점 (x,y)를 (x',y')으로 translate하고 있습니다.

176
00:11:16,430 --> 00:11:19,680
y값이 커질 수록 이동하는 양이 늘어나고,

177
00:11:19,680 --> 00:11:22,690
결국 물체를 theta의 각도 만큼 기울여

178
00:11:22,690 --> 00:11:25,770
찌그러뜨리는 효과를 보이고 있습니다.

179
00:11:25,770 --> 00:11:30,900
사각형의 밑변에서는 y = 0이기 때문에

180
00:11:30,900 --> 00:11:34,590
원래 밑변이 그대로 유지되고 있는 것을 볼 수 있습니다.

181
00:11:34,590 --> 00:11:41,430
이를 삼각함수로 나타내면 tangent theta는 정의에 의해

182
00:11:41,430 --> 00:11:47,540
y'/(x'-x) 또는 y/(x'-x)로  나타낼 수 있습니다.

183
00:11:47,540 --> 00:11:52,800
cotangent theta 는 tangent theta의 역수이므로

184
00:11:52,800 --> 00:11:54,320
(x'-x)/y 입니다.

185
00:11:54,320 --> 00:12:02,680
이로 부터, x' = x + y cot(theta), y'= y 이고,

186
00:12:02,680 --> 00:12:07,140
x 방향으로만 움직이므로, z' 는 변하지 않습니다.

187
00:12:07,140 --> 00:12:11,170
이를 x-shearing matrix Hx(theta)로 나타내면

188
00:12:11,170 --> 00:12:12,610
이 식과 같습니다.

189
00:12:12,610 --> 00:12:18,880
그리고, Hx(theta)의 inverse인 Hx^(-1)(theta)는

190
00:12:18,880 --> 00:12:20,910
Hx(-theta)와 같습니다.

191
00:12:20,910 --> 00:12:23,740
이러한 유도과정과 비슷한 방법들로

192
00:12:23,740 --> 00:12:27,860
y-shearing과 z-shearing의 transformation도

193
00:12:27,860 --> 00:12:30,000
쉽게 유도할 수 있을 것입니다.

194
00:12:30,000 --> 00:12:33,490
이것들은 여러분들이 직접 해 보시기 바랍니다.

195
00:12:33,490 --> 00:12:37,520
P가 M1에 의해 P'으로 transform되고,

196
00:12:37,520 --> 00:12:42,790
P'은 M2에 의해 P'' 으로 변환된다고 가정합시다.

197
00:12:42,790 --> 00:12:49,550
이 두 식을 합쳐 P'' = M2 M1 P 로 쓸 수 있습니다.

198
00:12:49,550 --> 00:12:53,650
M2 M1의 곱을 M3 matrix라하면,

199
00:12:53,650 --> 00:12:57,010
P'' 은 M3 P로 나타낼 수 있습니다.

200
00:12:57,010 --> 00:13:01,630
이 때, M3를 composite transformation의 matrix라고 합니다.

201
00:13:01,630 --> 00:13:04,770
주의할 점은, composite transformation이

202
00:13:04,770 --> 00:13:07,030
교환법칙을 따르지 않는다는 것입니다.

203
00:13:07,030 --> 00:13:13,740
즉, M2 M1과 M1 M2는 같은 transformation을 나타내지 않습니다.

204
00:13:13,740 --> 00:13:18,130
이것은 matrix 곱의 일반적인 성질이기도 합니다.

205
00:13:18,130 --> 00:13:22,850
예를 들어 이 그림에서 P는 먼저 90도 만큼 rotate 되어

206
00:13:22,850 --> 00:13:27,380
P'으로 transform되었고, 다시 (3,3)만큼 translate되어

207
00:13:27,380 --> 00:13:31,490
최종적으로 P'' =  (2, 6)이 되었습니다.

208
00:13:31,490 --> 00:13:36,180
그러나, translation (3,3)을 먼저 한 후 90도 rotation을 하면,

209
00:13:36,180 --> 00:13:42,690
전혀 다른 결과인 P''=(-4,6)가 나오게 됩니다.

210
00:13:42,690 --> 00:13:49,170
즉, composite transformation을 고려할 때에는 transformation들의 순서에 유의해야 합니다.

211
00:13:49,170 --> 00:13:54,060
Matrix의 곱에 대한 설명은 이 URL을 보시기 바랍니다.

212
00:13:54,060 --> 00:13:58,010
rotation matrix의 성질에 대해 좀 더 알아보도록 하겠습니다.

213
00:13:58,010 --> 00:14:03,270
3D에서의 4x4 rotation matrix R이 이와 같이 정의됩니다.

214
00:14:03,270 --> 00:14:08,080
우리는 앞에서 기본 축들인 x, y, z축에 관한 회전만을 고려하였지만,

215
00:14:08,080 --> 00:14:12,860
사실 3D에서 회전축이 될 수 있는 vector는 무한히 많습니다.

216
00:14:12,860 --> 00:14:17,650
이러한 일반적인 회전축을 고려하면 rotation matrix의 일반형은

217
00:14:17,650 --> 00:14:19,600
이 식과 같이 표현됩니다.

218
00:14:19,600 --> 00:14:26,830
특히, rotation은 4x4 matrix 중 좌측상단의 3x3 부분만을 사용합니다.

219
00:14:26,830 --> 00:14:33,310
그래서 이 3x3 부분만을 R-hat matrix로 분리해서 생각해 봅시다.

220
00:14:33,310 --> 00:14:36,780
R-hat는 다음과 같은 성질을 가지고 있습니다.

221
00:14:36,780 --> 00:14:40,730
먼저 모든 row vector들이 서로간에 수직입니다.

222
00:14:40,730 --> 00:14:45,340
모든 column vector들도 마찬가지로 서로간에 수직입니다.

223
00:14:45,340 --> 00:14:49,460
그리고, R-hat와 R-hat의 transpose 를 곱하면

224
00:14:49,460 --> 00:14:52,020
identity matrix가 나옵니다.

225
00:14:52,020 --> 00:14:55,420
결과적으로 R-hat의 transpose가

226
00:14:55,420 --> 00:14:58,920
R-hat의 inverse와 같다는 것을 알 수 있습니다.

227
00:14:58,920 --> 00:15:03,420
일반적으로 inverse matrix를 구하는 것은 상당히 복잡한데,

228
00:15:03,420 --> 00:15:08,700
이를 간단히 transpose로 해 낼 수 있으니 매우 편리한 성질입니다.

229
00:15:08,700 --> 00:15:12,400
여기까지 세 가지의 성질을 만족하는 matrix를

230
00:15:12,400 --> 00:15:15,180
"orthogonal matrix" 라 합니다.

231
00:15:15,180 --> 00:15:19,810
아까 R-hat는 여기에 한가지 성질을 더 가지고 있습니다.

232
00:15:19,810 --> 00:15:23,220
그 성질은 모든 row vector와 column vector들이

233
00:15:23,220 --> 00:15:25,920
unit vector라는 것입니다.

234
00:15:25,920 --> 00:15:29,550
이러한 네 가지의 성질을 모두 만족해는 matrix를

235
00:15:29,550 --> 00:15:32,100
“orthonormal matrix” 라 부르며,

236
00:15:32,100 --> 00:15:37,550
rigid transformation의 성질을 유지하는 올바른 rotation matrix가 됩니다.

237
00:15:37,550 --> 00:15:41,560
4x4 rotation matrix R은 이런 형태 입니다.

238
00:15:41,560 --> 00:15:44,880
Translation matrix T는 이런 형태 입니다.

239
00:15:44,880 --> 00:15:48,370
이제 rotation을 먼저하고 translation을 하는

240
00:15:48,370 --> 00:15:51,300
composite transformation을 고려해 봅니다.

241
00:15:51,300 --> 00:15:57,210
이 composite transformation의 matrix M은 T와 R의 곱입니다.

242
00:15:57,210 --> 00:16:01,130
point p에 rotation을 먼저적용하면 Rp,

243
00:16:01,130 --> 00:16:05,280
Rp에 translation을 적용하면 TRp 가 되므로

244
00:16:05,280 --> 00:16:08,530
M = TR 이 되는 것입니다.

245
00:16:08,530 --> 00:16:13,780
matrix 곱의 순서가 바뀌면 안된다는 것을 이미 이전에 설명하였습니다.

246
00:16:13,780 --> 00:16:18,190
계산된 M을 자세히 보면, 좌측 상단 3x3 부분에

247
00:16:18,190 --> 00:16:20,530
rotation matrix가 그대로 있고,

248
00:16:20,530 --> 00:16:22,730
반면에 맨 오른쪽 column에는

249
00:16:22,730 --> 00:16:26,370
translation factor들이 그대로 있음을 볼 수 있습니다.

250
00:16:26,370 --> 00:16:31,280
실제로 이 matrix 곱셈 TR 을 해 보면 이렇게 나옵니다.

251
00:16:31,280 --> 00:16:34,710
그러니까, "translation after rotation"의

252
00:16:34,710 --> 00:16:37,510
composite transformation의 matrix는

253
00:16:37,510 --> 00:16:40,680
matrix들의 곱을 실제로 계산하지 않고도

254
00:16:40,680 --> 00:16:43,890
쉽게 찾아 낼 수 있음을 알 수 있습니다.

255
00:16:43,890 --> 00:16:46,510
Composite transformation의 한 예로,

256
00:16:46,510 --> 00:16:50,980
원점이 아닌 임의의 점에 관한 rotation을 고려해 보겠습니다.

257
00:16:50,980 --> 00:16:56,580
그림에서 보면 회색 삼각형이 빨간 점 P = (x1, y1) 에 관하여

258
00:16:56,580 --> 00:17:01,810
90도 회전하여 노랑색 삼각형으로 transform되었습니다.

259
00:17:01,810 --> 00:17:07,090
지금까지 고려해왔던 rotation은 모두 원점에 관한 rotation이었습니다.

260
00:17:07,090 --> 00:17:13,810
그 rotation을 이용하기 위해, 우리는 먼저 P가 원점으로 translation되는

261
00:17:13,810 --> 00:17:18,610
T1(-x1, -y1)을 삼각형에 적용합니다.

262
00:17:18,610 --> 00:17:22,960
그리고 나서 원점에 관한 rotation R(theta)를 적용합니다.

263
00:17:22,960 --> 00:17:27,600
마지막으로 원점을 원래의 P로 다시 translation하는

264
00:17:27,600 --> 00:17:30,260
T2(x1, y1) 을 적용합니다.

265
00:17:30,260 --> 00:17:33,070
이 세단계의 transformation들을 모두 합친

266
00:17:33,070 --> 00:17:38,630
composite transformation은 T2 R T1 입니다.

267
00:17:38,630 --> 00:17:42,700
두 개의 서로 다른 frame (v1, v2, v3, P0)와

268
00:17:42,700 --> 00:17:47,440
(u1, u2, u3, Q0) 를 고려해 봅시다.

269
00:17:47,440 --> 00:17:53,230
첫번째 frame은 P0를 원점으로 하고, (v1, v2, v3)를 세개의 축,

270
00:17:53,230 --> 00:17:56,350
즉, basis vector로 하는 frame입니다.

271
00:17:56,350 --> 00:18:00,750
마찬가지로, 두번째 frame은 Q0를 원점으로 하고,

272
00:18:00,750 --> 00:18:05,390
(u1, u2, u3)를 basis vector로 하는 frame입니다.

273
00:18:05,390 --> 00:18:09,710
그 중 frame (u1, u2, u3, Q0)를

274
00:18:09,710 --> 00:18:15,090
다른 frame (v1, v2, v3, P0)에 관해 표현해 보면,

275
00:18:15,090 --> 00:18:17,300
이 식과 같이 나타낼 수 있습니다.

276
00:18:17,300 --> 00:18:20,430
즉, u1, u2, u3 vector를 각각

277
00:18:20,430 --> 00:18:26,930
basis (v1, v2, v3)에서의 coordinates들로 나타낼 수 있고,

278
00:18:26,930 --> 00:18:32,250
Q0는 point이므로 frame (v1, v2, v3, P0)에 관해

279
00:18:32,250 --> 00:18:35,050
이렇게 나타낼 수 있습니다.

280
00:18:35,050 --> 00:18:38,830
이 식들을 matrix형태로 정리하였습니다.

281
00:18:38,830 --> 00:18:43,480
즉, (u1, u2, u3, Q0) 는

282
00:18:43,480 --> 00:18:48,180
M과 (v1, v2, v3, P0)의 곱으로 나타낼 수 있습니다.

283
00:18:48,180 --> 00:18:54,260
여기서 M은 4 x 4 matrix로 u1, u2, u3, Q0의

284
00:18:54,260 --> 00:19:00,090
(v1, v2, v3, P0)에 관한 coordinates들을 담고 있습니다.

285
00:19:00,090 --> 00:19:05,470
matrix M을 "matrix of change of frames" 라 부릅니다.

286
00:19:05,470 --> 00:19:10,860
즉, 첫번째 frame을 두번째 frame으로 바꾸어 주는 matrix 입니다.

287
00:19:10,860 --> 00:19:16,090
point P를  각각 frame G와 F에서 나타낸 coordinates를

288
00:19:16,090 --> 00:19:18,940
각각 a와 b라고 가정합시다.

289
00:19:18,940 --> 00:19:22,110
이 노트의 첫 부분에서 주어진 frame에서의

290
00:19:22,110 --> 00:19:25,460
point의 coordinates를 나타낸 것을 기억해 보면,

291
00:19:25,460 --> 00:19:33,460
p는 먼저 F frame에 관해 b^T 곱하기 F로 표시할 수 있습니다.

292
00:19:33,460 --> 00:19:40,500
마찬가지로 p를 G frame에 관해 나타내면 a^T 곱하기 G가 됩니다.

293
00:19:40,500 --> 00:19:47,960
만약 b^T 를 a^T 로 바꾸는 transformation M이 존재한다면,

294
00:19:47,960 --> 00:19:55,470
b^T 곱하기 M 은 a^T 와 같을 것이고, 따라서 이렇게 표시할 수 있습니다.

295
00:19:55,470 --> 00:20:00,700
다시 써 보면 a^T = b^T M 입니다.

296
00:20:00,700 --> 00:20:05,040
양변에 transpose를 취하면, 이 식과 같이 됩니다.

297
00:20:05,040 --> 00:20:09,950
이를 풀면 a = M^T b 와 같이 됩니다.

298
00:20:09,950 --> 00:20:14,060
참고로 두 matrix의 곱 XY의 transpose는,

299
00:20:14,060 --> 00:20:19,050
Y의 transpose 곱하기 X의 transpose입니다.

300
00:20:19,050 --> 00:20:23,530
여기서 M^T는 frame F에서 G로

301
00:20:23,530 --> 00:20:25,420
coordinates를 conversion하는

302
00:20:25,420 --> 00:20:28,080
transformation matrix라 볼 수 있습니다.

303
00:20:28,080 --> 00:20:31,960
여기서 반대 방향, 즉 frame G에서 F로의

304
00:20:31,960 --> 00:20:33,900
coordinates를 conversion 하려면

305
00:20:33,900 --> 00:20:37,790
M^T의 inverse를 적용하면 됩니다.

306
00:20:37,790 --> 00:20:43,520
여기서 M^T 의 inverse를 matrix T로 표시하기로 합시다.

307
00:20:43,520 --> 00:20:47,680
이렇게 식으로만 풀어보니 잘 감이 안 잡히는데요.

308
00:20:47,680 --> 00:20:49,970
실제 예를 들어 보도록 합시다.

309
00:20:49,970 --> 00:20:54,930
먼저 두개의 서로 다른 frame들 G와 F를 고려합니다.

310
00:20:54,930 --> 00:21:01,200
그 두 frame에서 어떤 point의 coordinates를 각각 a와 b라고 하겠습니다.

311
00:21:01,200 --> 00:21:04,340
a = Cb 로 놓을 수 있다고 했기 때문에,

312
00:21:04,340 --> 00:21:09,780
C는 b에서 (즉 frame F에서) a로 (즉 frame G로) 가는

313
00:21:09,780 --> 00:21:13,030
coordinates conversion matrix 입니다.

314
00:21:13,030 --> 00:21:17,580
앞의 slide에서는 C를 M^T 로 표시하였었죠.

315
00:21:17,580 --> 00:21:21,420
문제는 이 C를 어떻게 찾느냐 하는 것입니다.

316
00:21:21,420 --> 00:21:24,420
그림에서 보듯 우리가 frame G를

317
00:21:24,420 --> 00:21:27,570
frame F에서 나타낼 수 있다고 가정해 봅시다.

318
00:21:27,570 --> 00:21:32,840
그림에서 보면 G의 x축은 F에서 unit vector u,

319
00:21:32,840 --> 00:21:37,910
y축은 F에서 unit vector v로 나타내어 졌습니다.

320
00:21:37,910 --> 00:21:42,270
그리고, G frame의 원점도 F frame에 관해 나타내면

321
00:21:42,270 --> 00:21:44,270
p 점이 된다고 가정합시다.

322
00:21:44,270 --> 00:21:48,540
이 때 C의 inverse 를 먼저 고려해 봅시다.

323
00:21:48,540 --> 00:21:52,590
이것은 G의 coordinates를 F로 conversion하는 matrix입니다.

324
00:21:52,590 --> 00:21:57,880
앞 장의 슬라이드에서 C의 inverse를 T로 표시했었습니다.

325
00:21:57,880 --> 00:22:02,410
T가 G를 F로 conversion하는 matrix이기 때문에,

326
00:22:02,410 --> 00:22:08,040
G의 x축 즉 (1, 0, 0)을 T로 변환하면, u가 나옵니다.

327
00:22:08,040 --> 00:22:13,380
앞 슬라이드에서 G의 x축이 F frame 에서 u로 표현된다고

328
00:22:13,380 --> 00:22:16,580
가정 했었음을 상기하도록 합니다.

329
00:22:16,580 --> 00:22:24,190
여기서는 homogenous 표현으로 G의 x축을 (1, 0, 0, 0)으로 표시 했는데,

330
00:22:24,190 --> 00:22:30,380
사실 G의 x, y, z 축의 변환 결과가 기여하는 T의 부분은

331
00:22:30,380 --> 00:22:37,330
4 x 4 matrix 중 rotation part인 좌측 상단의 3 x 3 부분입니다.

332
00:22:37,330 --> 00:22:41,170
따라서, w 값을 0으로 놓았습니다.

333
00:22:41,170 --> 00:22:47,000
마찬가지로, G의 y축 즉 (0, 1, 0)을 T로 변환하면,

334
00:22:47,000 --> 00:22:50,000
v가 나오게 될 것입니다.

335
00:22:50,000 --> 00:22:56,330
또, G의 z축 즉 (0, 0, 1)을 T로 변환하면 n이 나올 겁니다.

336
00:22:56,330 --> 00:23:02,340
마지막으로 G의 원점인 (0, 0, 0)을 T로 변환하면 p가 나옵니다.

337
00:23:02,340 --> 00:23:08,780
여기서 원점과 p는 모두 축이 아니고 점들이므로 w = 1로 해 줍니다.

338
00:23:08,780 --> 00:23:14,210
이제 이 결과들을 다 모아서 T matrix를 구하면 이와 같이 됩니다.

339
00:23:14,210 --> 00:23:17,130
T matrix를 보면 u, v, n 벡터들을

340
00:23:17,130 --> 00:23:21,810
각각 1, 2, 3 번째 column에 써 주고,

341
00:23:21,810 --> 00:23:25,140
원점 p의 좌표를 마지막 column에 배치합니다.

342
00:23:25,140 --> 00:23:27,760
그런데 이 형태는 많이 보던 것입니다.

343
00:23:27,760 --> 00:23:30,960
바로 "translation after rotation"의

344
00:23:30,960 --> 00:23:35,200
composite transformation matrix의 형태 입니다.

345
00:23:35,200 --> 00:23:42,320
즉, F frame에서의 G의 세 기본 축들의 unit vector들이 u, v, n 일때,

346
00:23:42,320 --> 00:23:48,340
그 세 개의 vector들을 세 column으로 가지는 3x3 rotation matrix를 만들어

347
00:23:48,340 --> 00:23:53,690
F의 좌상단 3x3 part에 배치합니다.

348
00:23:53,690 --> 00:23:57,740
그리고 F frame에서의 G의 원점의 좌표를

349
00:23:57,740 --> 00:24:00,970
T의 translation part로 만들면 됩니다.

350
00:24:00,970 --> 00:24:04,590
즉, G를 F로 conversion하는 T matrix는

351
00:24:04,590 --> 00:24:10,210
위와 같이 만든 translation matrix와 rotation matrix의 곱이 됩니다.

352
00:24:10,210 --> 00:24:16,880
요약하면, 어떤 frame G가 reference frame F에 관해 표현될 수 있다면,

353
00:24:16,880 --> 00:24:23,250
G의 coordinates들을 F의 coordinates들로 conversion하는 T matrix를

354
00:24:23,250 --> 00:24:26,440
이와 같이 쉽게 만들 수 있다는 것입니다.

355
00:24:26,440 --> 00:24:28,880
그렇다면, 그 반대의 경우,

356
00:24:28,880 --> 00:24:33,920
즉, F를 G로 conversion하는 matrix C는 어떻게 구할까요.

357
00:24:33,920 --> 00:24:38,520
C는 T의 inverse를 계산하면 구할 수 있을 것입니다.

358
00:24:38,520 --> 00:24:44,840
그런데, T가 translation matrix와 rotation matrix의 곱의 형태라고 했습니다.

359
00:24:44,840 --> 00:24:51,780
여기서 그 translation matrix를 H, rotation matrix를 K로 나타내 봅시다.

360
00:24:51,780 --> 00:24:54,740
그러면 T의 inverse인 C는

361
00:24:54,740 --> 00:24:58,780
K의 inverse와 H의 inverse의 곱이 됩니다.

362
00:24:58,780 --> 00:25:02,260
앞에서 rotation matrix는 orthonormal이고,

363
00:25:02,260 --> 00:25:06,130
그 inverse는 transpose와 같다고 했으니,

364
00:25:06,130 --> 00:25:11,660
K의 inverse는 일단 간단히 K를 transpose하여 구할 수 있습니다.

365
00:25:11,660 --> 00:25:15,480
또 translation matrix H의 inverse는

366
00:25:15,480 --> 00:25:20,270
translation factor (p_1, p_2, p_3) 의 반대 방향으로 가는

367
00:25:20,270 --> 00:25:24,280
translation을 나타내므로 또한 쉽게 구할 수 있습니다.

368
00:25:24,280 --> 00:25:29,150
즉 C를 구하기 위해서는, HK 를 곱하여 T를 계산하기 전에,

369
00:25:29,150 --> 00:25:35,790
H와 K를 따로 분리한 채로 inverse하는 것이 훨씬 간단하다는 것입니다.

370
00:25:35,790 --> 00:25:38,870
이제 양쪽 방향으로의 change of frame의 matrix를

371
00:25:38,870 --> 00:25:40,770
구하는 방법을 알았으니,

372
00:25:40,770 --> 00:25:43,500
실제 문제를 풀어 보도록 하겠습니다.

373
00:25:43,500 --> 00:25:47,350
계산을 간단히 하기 위해 2차원 문제로 설명하겠습니다.

374
00:25:47,350 --> 00:25:51,790
먼저 G의 x축을 F frame에서 나타낸 unit vector u는 (

375
00:25:51,790 --> 00:25:55,950
2 / root(5), 1 / root(5)) 입니다.

376
00:25:55,950 --> 00:26:01,160
또, G의 y축을 F frame에서 나타낸 unit vector v는

377
00:26:01,160 --> 00:26:05,390
(-1 / root(5), 2 / root(5)) 입니다.

378
00:26:05,390 --> 00:26:10,380
사실 이 숫자들은 그림의 2D grid의 눈금을 세어서 계산해 보면

379
00:26:10,380 --> 00:26:14,080
맞는 값들임을 알 수 있습니다.

380
00:26:14,080 --> 00:26:20,640
또, G의 원점을 F frame에서 나타내면 p = (3, 2)가 됩니다.

381
00:26:20,640 --> 00:26:25,550
이제 G를 F로 변환하는 matrix T를 구하려 합니다.

382
00:26:25,550 --> 00:26:31,250
앞 슬라이드에서 보았듯이 T는 p를 이용해 만든 translation matrix와

383
00:26:31,250 --> 00:26:35,370
u, v를 이용해 만든 rotation matrix의 곱입니다.

384
00:26:35,370 --> 00:26:38,900
즉, T는 이와 같은 식으로 표현됩니다.

385
00:26:38,900 --> 00:26:44,270
이제 반대 방향, 즉 F를 G로 변환하는 matrix C는

386
00:26:44,270 --> 00:26:48,400
T의 inverse를 구하면 됩니다.

387
00:26:48,400 --> 00:26:56,890
T = Tp R 임을 활용하여, inverse를 좀 쉽게 구할 수 있을 것 같습니다.

388
00:26:56,890 --> 00:27:03,980
(Tp R)^(-1)은 R^(-1) Tp^(-1) 입니다.

389
00:27:03,980 --> 00:27:07,080
이를 식으로 나타내면 이와 같습니다.

390
00:27:07,080 --> 00:27:10,230
마지막으로 두 inverse matrix를 곱하면

391
00:27:10,230 --> 00:27:13,040
C matrix를 구할 수 있습니다.

392
00:27:13,040 --> 00:27:18,060
이제 F frame에 관해 표현된 point q = (4, 5)를

393
00:27:18,060 --> 00:27:21,500
G frame에 관한 coordinates로 변환하려면,

394
00:27:21,500 --> 00:27:24,400
C와 q의 곱을 계산하면 됩니다.

395
00:27:24,400 --> 00:27:29,680
구해보니 (2.236, 2.236) 이 나오는데요,

396
00:27:29,680 --> 00:27:34,580
그림에서 G frame을 기준으로 보니 대충 맞는 것 같습니다.
