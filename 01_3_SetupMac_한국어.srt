1
00:00:00,000 --> 00:00:02,550
이 노트에서는 맥에서 Xcode를 사용하여

2
00:00:02,550 --> 00:00:07,040
OpenGL 프로그램을 빌드하고 실행하는 과정을 설명합니다.

3
00:00:07,040 --> 00:00:09,770
Xcode 는 맥OS 에서 제공하는 IDE,

4
00:00:09,770 --> 00:00:13,500
즉, Integrated Development Environment 입니다.

5
00:00:13,500 --> 00:00:16,380
이 setup 과정은 2024년 2월 초,

6
00:00:16,380 --> 00:00:20,380
Xcode version 15.2 에서 test 된 결과입니다.

7
00:00:20,380 --> 00:00:24,300
이 버전이 아닌 Xcode 인 경우 update를 해야 할 필요가 있습니다.

8
00:00:24,300 --> 00:00:26,400
여러가지 외부 라이브러리들이 필요한데

9
00:00:26,400 --> 00:00:30,560
이들을 가장 쉽게 install하는 방법은 Homebrew를 이용하는 것입니다.

10
00:00:30,560 --> 00:00:36,540
Homebrew는 http://brew.sh/ 에서 다운 받고 install할 수 있습니다.

11
00:00:36,540 --> 00:00:39,080
Homebrew를 install한 후, brew 명령을 이용하여,

12
00:00:39,080 --> 00:00:43,280
GLFW, GLEW, GLM을 install할 수 있습니다.

13
00:00:43,280 --> 00:00:45,510
모두 install한 이후에 terminal app에서

14
00:00:45,510 --> 00:00:48,240
cd 명령으로 /usr/local/Cellar 폴더로 가면

15
00:00:48,240 --> 00:00:52,520
glew, glfw, glm이 install 되어 있는 것을 볼 수 있습니다.

16
00:00:52,520 --> 00:00:56,040
/usr/local/include 에 가 보면 GL, GLFW, glm 폴더가

17
00:00:56,040 --> 00:01:01,690
각각 이전에 인스톨된 적절한 폴더들로 link 되어 있는 것을 알 수 있습니다.

18
00:01:01,690 --> 00:01:05,440
glew.h는 /usr/local/include/GL 아래에 있습니다.

19
00:01:05,440 --> 00:01:09,220
Project들을 만들 working folder를 하나 준비합니다.

20
00:01:09,220 --> 00:01:12,510
이 예에서는 MAC 이라는 folder를 만들었습니다.

21
00:01:12,510 --> 00:01:15,700
런어스에서 다운 받은 Source.zip 을 풀어서

22
00:01:15,700 --> 00:01:18,140
utils 폴더를 working folder 아 래로 copy 합니다.

23
00:01:18,140 --> 00:01:23,450
Xcode를 실행하여 OpenGL을 사용하기 위해서 먼저 project를 생성합니다.

24
00:01:23,450 --> 00:01:27,060
Project template으로 맥OS > "Command Line Tool" 을 선택한 후

25
00:01:27,060 --> 00:01:28,910
Next를 클릭합니다.

26
00:01:28,910 --> 00:01:33,090
Project 이름을 입력하고, language는 C++를 선택합니다.

27
00:01:33,090 --> 00:01:37,790
여기서는 00_HellowWindow 라는 Project 이름을 사용하겠습니다.

28
00:01:37,790 --> 00:01:39,900
Working folder (ex. MAC) 를 선택하고

29
00:01:39,900 --> 00:01:42,590
Create button을 click합니다.

30
00:01:42,590 --> 00:01:47,450
Working folder 아래 00_HellowWindow라는 이름의 project folder가 만들어 집니다.

31
00:01:47,450 --> 00:01:49,250
General tab에서 “Frameworks and Libraries” 아래의

32
00:01:49,250 --> 00:01:51,900
+ button을 누릅니다.

33
00:01:51,900 --> 00:01:57,850
그리고 opengl 을 서치하여 OpenGL 프레임웍을 선택한 후 add합니다.

34
00:01:57,850 --> 00:02:00,390
General tab, “Frameworks and Libraries” 아래의 +

35
00:02:00,390 --> 00:02:03,970
button, “Add Other” > “Add Files” 선택합니다.

36
00:02:03,970 --> 00:02:08,590
Command ­ Shift ­ G 를 눌러서 “go to the folder” 다이얼로그를 띄웁니다.

37
00:02:08,590 --> 00:02:12,280
여기에 우리가 가고자 하는 folder인 /usr/local/Cellar 를

38
00:02:12,280 --> 00:02:15,590
타이핑하고 enter를 누릅니다.

39
00:02:15,590 --> 00:02:18,330
/usr/local/Cellar 아래에서 glew 폴더를 찾고,

40
00:02:18,330 --> 00:02:24,320
자신이 install한 glew 패키지 아래의 lib 폴더로 들어가서 dylib 파일을 선택합니다.

41
00:02:24,320 --> 00:02:30,860
주의할 첨은 virtual file (즉, link) 가 아닌 실제 dylib 파일을 선택해야 한다는 것입니다.

42
00:02:30,860 --> 00:02:35,720
virtual file인지 실제 파일인지의 여부는 파일 아이콘을 보면 알 수 있습니다.

43
00:02:35,720 --> 00:02:40,160
같은 방법으로 glfw의 dylib 파일을 추가 합니다.

44
00:02:40,160 --> 00:02:43,810
이제 OpenGL framework, libGLEW, libglfw 의

45
00:02:43,810 --> 00:02:47,330
3개의 library를 이 프로그래밍 과정에 포함하게 되었습니다.

46
00:02:47,330 --> 00:02:48,370
이제 Header

47
00:02:48,370 --> 00:02:53,960
Search Paths에 /usr/local/include 와 ../utils 를 추가 합니다.

48
00:02:53,960 --> 00:03:00,070
project 를 생성할 때 default로 생기는 main.cpp 는 필요 없으므로 삭제해 버립니다.

49
00:03:00,070 --> 00:03:04,570
배포된 source에서 00_HellowWindow 프로젝트의 hello_window.cpp 를

50
00:03:04,570 --> 00:03:06,270
00_HelloWindow/00_HelloWindow 폴더에 카피합니다.

51
00:03:06,270 --> 00:03:12,280
00_HelloWindow 프로젝트에 오른쪽 마우스를 클릭하여

52
00:03:12,280 --> 00:03:15,840
팝업 메뉴 중에 “Add Files to “00_HelloWindow” 를 선택합니다.

53
00:03:15,840 --> 00:03:18,920
그리고 좀 전에 copy한 hello_window.cpp 를

54
00:03:18,920 --> 00:03:22,560
add 버튼을 눌러 프로젝트에 추가 합니다.

55
00:03:22,560 --> 00:03:26,910
왼쪽의 navigation area에서 hello_window.cpp 를 선택하면,

56
00:03:26,910 --> 00:03:29,450
source code를 볼 수 있습니다.

57
00:03:29,450 --> 00:03:32,780
play button 을 눌러 프로그램을 실행합니다.

58
00:03:32,780 --> 00:03:35,300
실행하면 이렇게 window가 하나 뜨면서

59
00:03:35,300 --> 00:03:39,330
회녹색 background가 나타나는 프로그램이 실행됩니다.

60
00:03:39,330 --> 00:03:41,780
키보드에서 ESC key를 누르거나

61
00:03:41,780 --> 00:03:44,230
빨강색 종료 button을 마우스로 클릭하면

62
00:03:44,230 --> 00:03:45,850
프로그램이 끝나게 됩니다.

63
00:03:45,850 --> 00:03:50,390
Derived Data 폴더는 build된 실행 파일을 저장하는 폴더입니다.

64
00:03:50,390 --> 00:03:52,590
이 폴더는 또한 프로그램 실행에 필요한

65
00:03:52,590 --> 00:03:54,910
shader 파일, texture 파일 등을 저장하기 위해

66
00:03:54,910 --> 00:03:56,980
우리가 알아야 하는 폴더 입니다.

67
00:03:56,980 --> 00:04:00,230
현재의 Derived Data 폴더가 어디인지 확인하기 위해

68
00:04:00,230 --> 00:04:03,260
Xcode > Settings menu를 선택합니다.

69
00:04:03,260 --> 00:04:05,120
“Locations” tab을 선택하면

70
00:04:05,120 --> 00:04:09,540
현재의 default “Derived Data” 폴더의 위치가 나 옵니다.

71
00:04:09,540 --> 00:04:16,330
보통 “/Users/username/Library/Developer/Xcode/DerivedData” 라는

72
00:04:16,330 --> 00:04:18,070
default 위치를 확인할 수 있습니다.

73
00:04:18,070 --> 00:04:21,590
여기서 username은 당신의 현재 user id 입니다.

74
00:04:21,590 --> 00:04:25,280
Derived Data 폴더를 좀 더 접근이 쉬운 폴더로 바꾸기 위해

75
00:04:25,280 --> 00:04:27,190
“Custom” option 을 선택하고

76
00:04:27,190 --> 00:04:30,720
자신이 정한 폴더를 지정해 줍니다.

77
00:04:30,720 --> 00:04:34,850
여기에서는 project directory인 MAC 아래에 DerivedData 라는 폴더를 만들어

78
00:04:34,850 --> 00:04:37,240
그것으로 지정해 주었습니다.

79
00:04:37,240 --> 00:04:40,900
이제 build를 하면 executable 파일인 00_HelloWindow 가

80
00:04:40,900 --> 00:04:44,050
MAC/DerivedData/00_HelloWindow....

81
00:04:44,050 --> 00:04:48,860
/Build/Products/Debug/ 아래에 생겨난 것을 볼 수 있습니다.

82
00:04:48,860 --> 00:04:51,950
앞으로 필요한 shader file이나 texture file들도

83
00:04:51,950 --> 00:04:56,130
이 executable 파일과 같은 directory에 넣어두면 됩니다.

84
00:04:56,130 --> 00:04:59,520
배포된 source 들 중 21_Texture1 은

85
00:04:59,520 --> 00:05:02,960
texture 파일, mage 파일, vertex shader 파일,

86
00:05:02,960 --> 00:05:06,920
fragment shader 파일들을 모두 포함하는 프로그램입니다.

87
00:05:06,920 --> 00:05:12,570
이 프로그램을 실행시키기 위해 Xcode에서 프로젝트를 만들고 실행해 보세요.

88
00:05:12,570 --> 00:05:14,290
texture 파일인 container.bmp와

89
00:05:14,290 --> 00:05:18,210
두 개의 shader 파일인 global.fs 와 global.vs 는

90
00:05:18,210 --> 00:05:20,810
자신이 정한 DerivedData 폴더 아래의

91
00:05:20,810 --> 00:05:26,610
21_Texture1..../Build/Products/Debug/ 아래에 copy해야 합니다.

92
00:05:26,610 --> 00:05:30,580
단, 처음 play, 즉, build 없이는 이 폴더가 존재하지 않으므로

93
00:05:30,580 --> 00:05:35,100
일단 copy하기 전에 build를 먼저 한 후 위의 세 파일을 카피하도록 합니다.

94
00:05:35,100 --> 00:05:39,940
즉, DerivedData directory 아래에는 이와 같은 파일들이 존재해야 합니다.

95
00:05:39,940 --> 00:05:43,350
shader file들을 Xcode에서 쉽게 editing 하기 위해,

96
00:05:43,350 --> 00:05:48,790
아까 cpp 파일을 추가 했던 것 처럼 DerivedData 폴더 안의 fs 파일들을

97
00:05:48,790 --> 00:05:52,170
21_Texture1 폴더에 add해 놓으면 좋습니다.
